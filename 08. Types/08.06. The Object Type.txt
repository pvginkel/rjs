8.6 The Object Type
===================

An Object is a collection of properties. Each property is either a named data property, a named
accessor property, or an internal property:

-   A named data property associates a name with an ECMAScript language value and a set of Boolean
    attributes.

-   A named accessor property associates a name with one or two accessor functions, and a set of
    Boolean attributes. The accessor functions are used to store or retrieve an ECMAScript language
    value that is associated with the property.

-   An internal property has no name and is not directly accessible via ECMAScript language
    operators. Internal properties exist purely for specification purposes.

There are two kinds of access for named (non-internal) properties: get and put, corresponding to
retrieval and assignment, respectively.

8.6.1 Property Attributes
=========================

Attributes are used in this specification to define and explain the state of named properties. A
named data property associates a name with the attributes listed in Table 5

Table 5 — Attributes of a Named Data Property

  Attribute Name     Value Domain                   Description
  ------------------ ------------------------------ -------------------------------------------------------------------------------------------------------------------------------------------------------
  [[Value]]          Any ECMAScript language type   The value retrieved by reading the property.
  [[Writable]]       Boolean                        If false, attempts by ECMAScript code to change the property’s [[Value]] attribute using [[Put]] will not succeed.
  [[Enumerable]]     Boolean                        If true, the property will be enumerated by a for-in enumeration (see 12.6.4). Otherwise, the property is said to be non-enumerable.
  [[Configurable]]   Boolean                        If false, attempts to delete the property, change the property to be an accessor property, or change its attributes (other than [[Value]]) will fail.

A named accessor property associates a name with the attributes listed in Table 6.

Table 6 — Attributes of a Named Accessor Property

  Attribute Name     Value Domain          Description
  ------------------ --------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[Get]]            Object or Undefined   If the value is an Object it must be a function Object. The function’s [[Call]] internal method (8.6.2) is called with an empty arguments list to return the property value each time a get access of the property is performed.
  [[Set]]            Object or Undefined   If the value is an Object it must be a function Object. The function’s [[Call]] internal method (8.6.2) is called with an arguments list containing the assigned value as its sole argument each time a set access of the property is performed. The effect of a property’s [[Set]] internal method may, but is not required to, have an effect on the value returned by subsequent calls to the property’s [[Get]] internal method.
  [[Enumerable]]     Boolean               If true, the property is to be enumerated by a for-in enumeration (see 12.6.4). Otherwise, the property is said to be non-enumerable.
  [[Configurable]]   Boolean               If false, attempts to delete the property, change the property to be a data property, or change its attributes will fail.

If the value of an attribute is not explicitly specified by this specification for a named property,
the default value defined in Table 7 is used.

Table 7 — Default Attribute Values

  Attribute Name     Default Value
  ------------------ ---------------
  [[Value]]          undefined
  [[Get]]            undefined
  [[Set]]            undefined
  [[Writable]]       false
  [[Enumerable]]     false
  [[Configurable]]   false

8.6.2 Object Internal Properties and Methods
============================================

This specification uses various internal properties to define the semantics of object values. These
internal properties are not part of the ECMAScript language. They are defined by this specification
purely for expository purposes. An implementation of ECMAScript must behave as if it produced and
operated upon internal properties in the manner described here. The names of internal properties are
enclosed in double square brackets [[ ]]. When an algorithm uses an internal property of an object
and the object does not implement the indicated internal property, a TypeError exception is thrown.

The Table 8 summarises the internal properties used by this specification that are applicable to all
ECMAScript objects. The Table 9 summarises the internal properties used by this specification that
are only applicable to some ECMAScript objects. The descriptions in these tables indicate their
behaviour for native ECMAScript objects, unless stated otherwise in this document for particular
kinds of native ECMAScript objects. Host objects may support these internal properties with any
implementation-dependent behaviour as long as it is consistent with the specific host object
restrictions stated in this document.

The “Value Type Domain” columns of the following tables define the types of values associated with
internal properties. The type names refer to the types defined in Clause 8 augmented by the
following additional names. “any” means the value may be any ECMAScript language type. “primitive”
means Undefined, Null, Boolean, String, or Number. “SpecOp” means the internal property is an
internal method, an implementation provided procedure defined by an abstract operation
specification. “SpecOp” is followed by a list of descriptive parameter names. If a parameter name is
the same as a type name then the name describes the type of the parameter. If a “SpecOp” returns a
value, its parameter list is followed by the symbol “→” and the type of the returned value.

Table 8 — Internal Properties Common to All Objects

+-----------------------------------+-----------------------------------+-----------------------------------+
| Internal Property                 | Value Type Domain                 | Description                       |
+===================================+===================================+===================================+
| [[Prototype]]                     | Object or Null                    | The prototype of this object.     |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[Class]]                         | String                            | A String value indicating a       |
|                                   |                                   | specification defined             |
|                                   |                                   | classification of objects.        |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[Extensible]]                    | Boolean                           | If true, own properties may be    |
|                                   |                                   | added to the object.              |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[Get]]                           | SpecOp(propertyName) → any        | Returns the value of the named    |
|                                   |                                   | property.                         |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[GetOwnProperty]]                | SpecOp (propertyName) →           | Returns the Property Descriptor   |
|                                   |                                   | of the named own property of this |
|                                   | Undefined or Property Descriptor  | object, or undefined if absent.   |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[GetProperty]]                   | SpecOp (propertyName) →           | Returns the fully populated       |
|                                   |                                   | Property Descriptor of the named  |
|                                   | Undefined or Property Descriptor  | property of this object, or       |
|                                   |                                   | undefined if absent.              |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[Put]]                           | SpecOp (propertyName, any,        | Sets the specified named property |
|                                   | Boolean)                          | to the value of the second        |
|                                   |                                   | parameter. The flag controls      |
|                                   |                                   | failure handling.                 |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[CanPut]]                        | SpecOp (propertyName) → Boolean   | Returns a Boolean value           |
|                                   |                                   | indicating whether a [[Put]]      |
|                                   |                                   | operation with PropertyName can   |
|                                   |                                   | be performed.                     |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[HasProperty]]                   | SpecOp (propertyName) → Boolean   | Returns a Boolean value           |
|                                   |                                   | indicating whether the object     |
|                                   |                                   | already has a property with the   |
|                                   |                                   | given name.                       |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[Delete]]                        | SpecOp (propertyName, Boolean) →  | Removes the specified named own   |
|                                   | Boolean                           | property from the object. The     |
|                                   |                                   | flag controls failure handling.   |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[DefaultValue]]                  | SpecOp (Hint) → primitive         | Hint is a String. Returns a       |
|                                   |                                   | default value for the object.     |
+-----------------------------------+-----------------------------------+-----------------------------------+
| [[DefineOwnProperty]]             | SpecOp (propertyName,             | Creates or alters the named own   |
|                                   | PropertyDescriptor, Boolean) →    | property to have the state        |
|                                   | Boolean                           | described by a Property           |
|                                   |                                   | Descriptor. The flag controls     |
|                                   |                                   | failure handling.                 |
+-----------------------------------+-----------------------------------+-----------------------------------+

Every object (including host objects) must implement all of the internal properties listed in Table
8. However, the [[DefaultValue]] internal method may, for some objects, simply throw a TypeError
exception.

All objects have an internal property called [[Prototype]]. The value of this property is either
null or an object and is used for implementing inheritance. Whether or not a native object can have
a host object as its [[Prototype]] depends on the implementation. Every [[Prototype]] chain must
have finite length (that is, starting from any object, recursively accessing the [[Prototype]]
internal property must eventually lead to a null value). Named data properties of the [[Prototype]]
object are inherited (are visible as properties of the child object) for the purposes of get access,
but not for put access. Named accessor properties are inherited for both get access and put access.

Every ECMAScript object has a Boolean-valued [[Extensible]] internal property that controls whether
or not named properties may be added to the object. If the value of the [[Extensible]] internal
property is false then additional named properties may not be added to the object. In addition, if
[[Extensible]] is false the value of the [[Class]] and [[Prototype]] internal properties of the
object may not be modified. Once the value of an [[Extensible]] internal property has been set to
false it may not be subsequently changed to true.

NOTE This specification defines no ECMAScript language operators or built-in functions that permit a
program to modify an object’s [[Class]] or [[Prototype]] internal properties or to change the value
of [[Extensible]] from false to true. Implementation specific extensions that modify [[Class]],
[[Prototype]] or [[Extensible]] must not violate the invariants defined in the preceding paragraph.

The value of the [[Class]] internal property is defined by this specification for every kind of
built-in object. The value of the [[Class]] internal property of a host object may be any String
value except one of "Arguments", "Array", "Boolean", "Date", "Error", "Function", "JSON", "Math",
"Number", "Object", "RegExp", and "String". The value of a [[Class]] internal property is used
internally to distinguish different kinds of objects. Note that this specification does not provide
any means for a program to access that value except through Object.prototype.toString (see
15.2.4.2).

Unless otherwise specified, the common internal methods of native ECMAScript objects behave as
described in 8.12. Array objects have a slightly different implementation of the
[[DefineOwnProperty]] internal method (see 15.4.5.1) and String objects have a slightly different
implementation of the [[GetOwnProperty]] internal method (see 15.5.5.2). Arguments objects (10.6)
have different implementations of [[Get]], [[GetOwnProperty]], [[DefineOwnProperty]], and
[[Delete]]. Function objects (15.3) have a different implementation of [[Get]].

Host objects may implement these internal methods in any manner unless specified otherwise; for
example, one possibility is that [[Get]] and [[Put]] for a particular host object indeed fetch and
store property values but [[HasProperty]] always generates false. However, if any specified
manipulation of a host object’s internal properties is not supported by an implementation, that
manipulation must throw a TypeError exception when attempted.

The [[GetOwnProperty]] internal method of a host object must conform to the following invariants for
each property of the host object:

-   If a property is described as a data property and it may return different values over time, then
    either or both of the [[Writable]] and [[Configurable]] attributes must be true even if no
    mechanism to change the value is exposed via the other internal methods.

-   If a property is described as a data property and its [[Writable]] and [[Configurable]] are both
    false, then the SameValue (according to 9.12) must be returned for the [[Value]] attribute of
    the property on all calls to [[GetOwnProperty]].

-   If the attributes other than [[Writable]] may change over time or if the property might
    disappear, then the [[Configurable]] attribute must be true.

-   If the [[Writable]] attribute may change from false to true, then the [[Configurable]] attribute
    must be true.

-   If the value of the host object’s [[Extensible]] internal property has been observed by
    ECMAScript code to be false, then if a call to [[GetOwnProperty]] describes a property as
    non-existent all subsequent calls must also describe that property as non-existent.

The [[DefineOwnProperty]] internal method of a host object must not permit the addition of a new
property to a host object if the [[Extensible]] internal property of that host object has been
observed by ECMAScript code to be false.

If the [[Extensible]] internal property of that host object has been observed by ECMAScript code to
be false then it must not subsequently become true.

Table 9 — Internal Properties Only Defined for Some Objects

  Internal Property      Value Type Domain                               Description
  ---------------------- ----------------------------------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [[PrimitiveValue]]     primitive                                       Internal state information associated with this object. Of the standard built-in ECMAScript objects, only Boolean, Date, Number, and String objects implement [[PrimitiveValue]].
  [[Construct]]          SpecOp(a List of any) → Object                  Creates an object. Invoked via the new operator. The arguments to the SpecOp are the arguments passed to the new operator. Objects that implement this internal method are called constructors.
  [[Call]]               SpecOp(any, a List of any) → any or Reference   Executes code associated with the object. Invoked via a function call expression. The arguments to the SpecOp are this object and a list containing the arguments passed to the function call expression. Objects that implement this internal method are callable. Only callable objects that are host objects may return Reference values.
  [[HasInstance]]        SpecOp(any) → Boolean                           Returns a Boolean value indicating whether the argument is likely an Object that was constructed by this object. Of the standard built-in ECMAScript objects, only Function objects implement [[HasInstance]].
  [[Scope]]              Lexical Environment                             A lexical environment that defines the environment in which a Function object is executed. Of the standard built-in ECMAScript objects, only Function objects implement [[Scope]].
  [[FormalParameters]]   List of Strings                                 A possibly empty List containing the identifier Strings of a Function’s FormalParameterList. Of the standard built-in ECMAScript objects, only Function objects implement [[FormalParameterList]].
  [[Code]]               ECMAScript code                                 The ECMAScript code of a function. Of the standard built-in ECMAScript objects, only Function objects implement [[Code]].
  [[TargetFunction]]     Object                                          The target function of a function object created using the standard built-in Function.prototype.bind method. Only ECMAScript objects created using Function.prototype.bind have a [[TargetFunction]] internal property.
  [[BoundThis]]          any                                             The pre-bound this value of a function Object created using the standard built-in Function.prototype.bind method. Only ECMAScript objects created using Function.prototype.bind have a [[BoundThis]] internal property.
  [[BoundArguments]]     List of any                                     The pre-bound argument values of a function Object created using the standard built-in Function.prototype.bind method. Only ECMAScript objects created using Function.prototype.bind have a [[BoundArguments]] internal property.
  [[Match]]              SpecOp(String, index) → MatchResult             Tests for a regular expression match and returns a MatchResult value (see 15.10.2.1). Of the standard built-in ECMAScript objects, only RegExp objects implement [[Match]].
  [[ParameterMap]]       Object                                          Provides a mapping between the properties of an arguments object (see 10.6) and the formal parameters of the associated function. Only ECMAScript objects that are arguments objects have a [[ParameterMap]] internal property.
