>>>>>CM:GREEN
15.9 Date Objects
>>>>>CM:GREEN
=================

>>>>>CM:GREEN
15.9.1 Overview of Date Objects and Definitions of Abstract Operators
>>>>>CM:GREEN
=====================================================================

>>>>>CM:GREEN
The following functions are abstract operations that operate on time values (defined in 15.9.1.1).
>>>>>CM:GREEN
Note that, in every case, if any argument to one of these functions is NaN, the result will be NaN.

>>>>>CM:GREEN
15.9.1.1 Time Values and Time Range
>>>>>CM:GREEN
===================================

>>>>>CM:GREEN
A Date object contains a Number indicating a particular instant in time to within a millisecond.
>>>>>CM:GREEN
Such a Number is called a time value. A time value may also be NaN, indicating that the Date object
>>>>>CM:GREEN
does not represent a specific instant of time.

>>>>>CM:GREEN
Time is measured in ECMAScript in milliseconds since 01 January, 1970 UTC. In time values leap
>>>>>CM:GREEN
seconds are ignored. It is assumed that there are exactly 86,400,000 milliseconds per day.
>>>>>CM:GREEN
ECMAScript Number values can represent all integers from –9,007,199,254,740,992 to
>>>>>CM:GREEN
9,007,199,254,740,992; this range suffices to measure times to millisecond precision for any instant
>>>>>CM:GREEN
that is within approximately 285,616 years, either forward or backward, from 01 January, 1970 UTC.

>>>>>CM:GREEN
The actual range of times supported by ECMAScript Date objects is slightly smaller: exactly
>>>>>CM:GREEN
–100,000,000 days to 100,000,000 days measured relative to midnight at the beginning of 01 January,
>>>>>CM:GREEN
1970 UTC. This gives a range of 8,640,000,000,000,000 milliseconds to either side of 01 January,
>>>>>CM:GREEN
1970 UTC.

>>>>>CM:GREEN
The exact moment of midnight at the beginning of 01 January, 1970 UTC is represented by the value
>>>>>CM:GREEN
+0.

>>>>>CM:GREEN
15.9.1.2 Day Number and Time within Day
>>>>>CM:GREEN
=======================================

>>>>>CM:GREEN
A given time value t belongs to day number

>>>>>CM:GREEN
Day(t) = floor(t / msPerDay)

>>>>>CM:GREEN
where the number of milliseconds per day is

>>>>>CM:GREEN
msPerDay = 86400000

>>>>>CM:GREEN
The remainder is called the time within the day:

>>>>>CM:GREEN
TimeWithinDay(t) = t modulo msPerDay

>>>>>CM:GREEN
15.9.1.3 Year Number
>>>>>CM:GREEN
====================

>>>>>CM:GREEN
ECMAScript uses an extrapolated Gregorian system to map a day number to a year number and to
>>>>>CM:GREEN
determine the month and date within that year. In this system, leap years are precisely those which
>>>>>CM:GREEN
are (divisible by 4) and ((not divisible by 100) or (divisible by 400)). The number of days in year
>>>>>CM:GREEN
number y is therefore defined by

>>>>>CM:GREEN
DaysInYear(y) = 365 if (y modulo 4) ≠ 0  
>>>>>CM:GREEN
= 366 if (y modulo 4) = 0 and (y modulo 100) ≠ 0  
>>>>>CM:GREEN
= 365 if (y modulo 100) = 0 and (y modulo 400) ≠ 0  
>>>>>CM:GREEN
= 366 if (y modulo 400) = 0

>>>>>CM:GREEN
All non-leap years have 365 days with the usual number of days per month and leap years have an
>>>>>CM:GREEN
extra day in February. The day number of the first day of year y is given by:

>>>>>CM:GREEN
DayFromYear(y) = 365 × (y−1970) + floor((y−1969)/4) − floor((y−1901)/100) + floor((y−1601)/400)

>>>>>CM:GREEN
The time value of the start of a year is:

>>>>>CM:GREEN
TimeFromYear(y) = msPerDay × DayFromYear(y)

>>>>>CM:GREEN
A time value determines a year by:

>>>>>CM:GREEN
YearFromTime(t) = the largest integer y (closest to positive infinity) such that TimeFromYear(y) ≤ t

>>>>>CM:GREEN
The leap-year function is 1 for a time within a leap year and otherwise is zero:

>>>>>CM:GREEN
InLeapYear(t) = 0 if DaysInYear(YearFromTime(t)) = 365  
>>>>>CM:GREEN
= 1 if DaysInYear(YearFromTime(t)) = 366

>>>>>CM:GREEN
15.9.1.4 Month Number
>>>>>CM:GREEN
=====================

>>>>>CM:GREEN
Months are identified by an integer in the range 0 to 11, inclusive. The mapping MonthFromTime(t)
>>>>>CM:GREEN
from a time value t to a month number is defined by:

>>>>>CM:GREEN
MonthFromTime(t) = 0 if 0 ≤ DayWithinYear(t) < 31  
>>>>>CM:GREEN
 = 1 if 31 ≤ DayWithinYear (t) < 59+InLeapYear(t)  
>>>>>CM:GREEN
 = 2 if 59+InLeapYear(t) ≤ DayWithinYear (t) < 90+InLeapYear(t)  
>>>>>CM:GREEN
 = 3 if 90+InLeapYear(t) ≤ DayWithinYear (t) < 120+InLeapYear(t)  
>>>>>CM:GREEN
 = 4 if 120+InLeapYear(t) ≤ DayWithinYear (t) < 151+InLeapYear(t)  
>>>>>CM:GREEN
 = 5 if 151+InLeapYear(t) ≤ DayWithinYear (t) < 181+InLeapYear(t)  
>>>>>CM:GREEN
 = 6 if 181+InLeapYear(t) ≤ DayWithinYear (t) < 212+InLeapYear(t)  
>>>>>CM:GREEN
 = 7 if 212+InLeapYear(t) ≤ DayWithinYear (t) < 243+InLeapYear(t)  
>>>>>CM:GREEN
 = 8 if 243+InLeapYear(t) ≤ DayWithinYear (t) < 273+InLeapYear(t)  
>>>>>CM:GREEN
 = 9 if 273+InLeapYear(t) ≤ DayWithinYear (t) < 304+InLeapYear(t)  
>>>>>CM:GREEN
 = 10 if 304+InLeapYear(t) ≤ DayWithinYear (t) < 334+InLeapYear(t)  
>>>>>CM:GREEN
 = 11 if 334+InLeapYear(t) ≤ DayWithinYear (t) < 365+InLeapYear(t)

>>>>>CM:GREEN
where

>>>>>CM:GREEN
DayWithinYear(t) = Day(t)−DayFromYear(YearFromTime(t))

>>>>>CM:GREEN
A month value of 0 specifies January; 1 specifies February; 2 specifies March; 3 specifies April;
>>>>>CM:GREEN
4 specifies May; 5 specifies June; 6 specifies July; 7 specifies August; 8 specifies September; 9
>>>>>CM:GREEN
specifies October; 10 specifies November; and 11 specifies December. Note that MonthFromTime(0) = 0,
>>>>>CM:GREEN
corresponding to Thursday, 01 January, 1970.

>>>>>CM:GREEN
15.9.1.5 Date Number
>>>>>CM:GREEN
====================

>>>>>CM:GREEN
A date number is identified by an integer in the range 1 through 31, inclusive. The mapping
>>>>>CM:GREEN
DateFromTime(t) from a time value t to a month number is defined by:

>>>>>CM:GREEN
DateFromTime(t) = DayWithinYear(t)+1 if MonthFromTime(t)=0  
>>>>>CM:GREEN
 = DayWithinYear(t)−30 if MonthFromTime(t)=1  
>>>>>CM:GREEN
 = DayWithinYear(t)−58−InLeapYear(t) if MonthFromTime(t)=2  
>>>>>CM:GREEN
 = DayWithinYear(t)−89−InLeapYear(t) if MonthFromTime(t)=3  
>>>>>CM:GREEN
 = DayWithinYear(t)−119−InLeapYear(t) if MonthFromTime(t)=4  
>>>>>CM:GREEN
 = DayWithinYear(t)−150−InLeapYear(t) if MonthFromTime(t)=5  
>>>>>CM:GREEN
 = DayWithinYear(t)−180−InLeapYear(t) if MonthFromTime(t)=6  
>>>>>CM:GREEN
 = DayWithinYear(t)−211−InLeapYear(t) if MonthFromTime(t)=7  
>>>>>CM:GREEN
 = DayWithinYear(t)−242−InLeapYear(t) if MonthFromTime(t)=8  
>>>>>CM:GREEN
 = DayWithinYear(t)−272−InLeapYear(t) if MonthFromTime(t)=9  
>>>>>CM:GREEN
 = DayWithinYear(t)−303−InLeapYear(t) if MonthFromTime(t)=10  
>>>>>CM:GREEN
 = DayWithinYear(t)−333−InLeapYear(t) if MonthFromTime(t)=11

>>>>>CM:GREEN
15.9.1.6 Week Day
>>>>>CM:GREEN
=================

>>>>>CM:GREEN
The weekday for a particular time value t is defined as

>>>>>CM:GREEN
WeekDay(t) = (Day(t) + 4) modulo 7

>>>>>CM:GREEN
A weekday value of 0 specifies Sunday; 1 specifies Monday; 2 specifies Tuesday; 3 specifies
>>>>>CM:GREEN
Wednesday; 4 specifies Thursday; 5 specifies Friday; and 6 specifies Saturday. Note that WeekDay(0)
>>>>>CM:GREEN
= 4, corresponding to Thursday, 01 January, 1970.

>>>>>CM:GREEN
15.9.1.7 Local Time Zone Adjustment
>>>>>CM:GREEN
===================================

>>>>>CM:GREEN
An implementation of ECMAScript is expected to determine the local time zone adjustment. The local
>>>>>CM:GREEN
time zone adjustment is a value LocalTZA measured in milliseconds which when added to UTC represents
>>>>>CM:GREEN
the local standard time. Daylight saving time is not reflected by LocalTZA. The value LocalTZA does
>>>>>CM:GREEN
not vary with time but depends only on the geographic location.

>>>>>CM:GREEN
15.9.1.8 Daylight Saving Time Adjustment
>>>>>CM:GREEN
========================================

>>>>>CM:GREEN
An implementation of ECMAScript is expected to determine the daylight saving time algorithm. The
>>>>>CM:GREEN
algorithm to determine the daylight saving time adjustment DaylightSavingTA(t), measured in
>>>>>CM:GREEN
milliseconds, must depend only on four things:

>>>>>CM:GREEN
(1) the time since the beginning of the year

>>>>>CM:GREEN
t – TimeFromYear(YearFromTime(t))

>>>>>CM:GREEN
(2) whether t is in a leap year

>>>>>CM:GREEN
InLeapYear(t)

>>>>>CM:GREEN
(3) the week day of the beginning of the year

>>>>>CM:GREEN
WeekDay(TimeFromYear(YearFromTime(t)))

>>>>>CM:GREEN
and (4) the geographic location.

>>>>>CM:GREEN
The implementation of ECMAScript should not try to determine whether the exact time was subject to
>>>>>CM:GREEN
daylight saving time, but just whether daylight saving time would have been in effect if the current
>>>>>CM:GREEN
daylight saving time algorithm had been used at the time. This avoids complications such as taking
>>>>>CM:GREEN
into account the years that the locale observed daylight saving time year round.

>>>>>CM:GREEN
If the host environment provides functionality for determining daylight saving time, the
>>>>>CM:GREEN
implementation of ECMAScript is free to map the year in question to an equivalent year (same
>>>>>CM:GREEN
leap-year-ness and same starting week day for the year) for which the host environment provides
>>>>>CM:GREEN
daylight saving time information. The only restriction is that all equivalent years should produce
>>>>>CM:GREEN
the same result.

>>>>>CM:GREEN
15.9.1.9 Local Time
>>>>>CM:GREEN
===================

>>>>>CM:GREEN
Conversion from UTC to local time is defined by

>>>>>CM:GREEN
LocalTime(t) = t + LocalTZA + DaylightSavingTA(t)

>>>>>CM:GREEN
Conversion from local time to UTC is defined by

>>>>>CM:GREEN
UTC(t) = t – LocalTZA – DaylightSavingTA(t – LocalTZA)

>>>>>CM:GREEN
Note that UTC(LocalTime(t)) is not necessarily always equal to t.

>>>>>CM:GREEN
15.9.1.10 Hours, Minutes, Second, and Milliseconds
>>>>>CM:GREEN
==================================================

>>>>>CM:GREEN
The following functions are useful in decomposing time values:

>>>>>CM:GREEN
HourFromTime(t) = floor(t / msPerHour) modulo HoursPerDay

>>>>>CM:GREEN
MinFromTime(t) = floor(t / msPerMinute) modulo MinutesPerHour

>>>>>CM:GREEN
SecFromTime(t) = floor(t / msPerSecond) modulo SecondsPerMinute

>>>>>CM:GREEN
msFromTime(t) = t modulo msPerSecond

>>>>>CM:GREEN
where

>>>>>CM:GREEN
HoursPerDay = 24

>>>>>CM:GREEN
MinutesPerHour = 60

>>>>>CM:GREEN
SecondsPerMinute = 60

>>>>>CM:GREEN
msPerSecond = 1000

>>>>>CM:GREEN
msPerMinute = 60000 = msPerSecond × SecondsPerMinute

>>>>>CM:GREEN
msPerHour = 3600000 = msPerMinute × MinutesPerHour

>>>>>CM:GREEN
15.9.1.11 MakeTime (hour, min, sec, ms)
>>>>>CM:GREEN
=======================================

>>>>>CM:GREEN
The operator MakeTime calculates a number of milliseconds from its four arguments, which must be
>>>>>CM:GREEN
ECMAScript Number values. This operator functions as follows:

>>>>>CM:GREEN
1.  If hour is not finite or min is not finite or sec is not finite or ms is not finite, return NaN.
>>>>>CM:GREEN
2.  Let h be ToInteger(hour).
>>>>>CM:GREEN
3.  Let m be ToInteger(min).
>>>>>CM:GREEN
4.  Let s be ToInteger(sec).
>>>>>CM:GREEN
5.  Let milli be ToInteger(ms).
>>>>>CM:GREEN
6.  Let t be h * msPerHour + m * msPerMinute + s * msPerSecond + milli, performing the arithmetic
>>>>>CM:GREEN
    according to IEEE 754 rules (that is, as if using the ECMAScript operators * and +).
>>>>>CM:GREEN
7.  Return t.

>>>>>CM:GREEN
15.9.1.12 MakeDay (year, month, date)
>>>>>CM:GREEN
=====================================

>>>>>CM:GREEN
The operator MakeDay calculates a number of days from its three arguments, which must be ECMAScript
>>>>>CM:GREEN
Number values. This operator functions as follows:

>>>>>CM:GREEN
1.  If year is not finite or month is not finite or date is not finite, return NaN.
>>>>>CM:GREEN
2.  Let y be ToInteger(year).
>>>>>CM:GREEN
3.  Let m be ToInteger(month).
>>>>>CM:GREEN
4.  Let dt be ToInteger(date).
>>>>>CM:GREEN
5.  Let ym be y + floor(m /12).
>>>>>CM:GREEN
6.  Let mn be m modulo 12.
>>>>>CM:GREEN
7.  Find a value t such that YearFromTime(t) == ym and MonthFromTime(t) == mn and DateFromTime(t) ==
>>>>>CM:GREEN
    1; but if this is not possible (because some argument is out of range), return NaN.
>>>>>CM:GREEN
8.  Return Day(t) + dt − 1.

>>>>>CM:GREEN
15.9.1.13 MakeDate (day, time)
>>>>>CM:GREEN
==============================

>>>>>CM:GREEN
The operator MakeDate calculates a number of milliseconds from its two arguments, which must be
>>>>>CM:GREEN
ECMAScript Number values. This operator functions as follows:

>>>>>CM:GREEN
1.  If day is not finite or time is not finite, return NaN.
>>>>>CM:GREEN
2.  Return day × msPerDay + time.

>>>>>CM:GREEN
15.9.1.14 TimeClip (time)
>>>>>CM:GREEN
=========================

>>>>>CM:GREEN
The operator TimeClip calculates a number of milliseconds from its argument, which must be an
>>>>>CM:GREEN
ECMAScript Number value. This operator functions as follows:

>>>>>CM:GREEN
1.  If time is not finite, return NaN.
>>>>>CM:GREEN
2.  If abs(time) > 8.64 x 10^15, return NaN.
>>>>>CM:GREEN
3.  Return an implementation-dependent choice of either ToInteger(time) or ToInteger(time) + (+0).
>>>>>CM:GREEN
    (Adding a positive zero converts −0 to +0.)

>>>>>CM:GREEN
NOTE The point of step 3 is that an implementation is permitted a choice of internal representations
>>>>>CM:GREEN
of time values, for example as a 64-bit signed integer or as a 64-bit floating-point value.
>>>>>CM:GREEN
Depending on the implementation, this internal representation may or may not distinguish −0 and +0.

>>>>>CM:GREEN
15.9.1.15 Date Time String Format
>>>>>CM:GREEN
=================================

>>>>>CM:GREEN
ECMAScript defines a string interchange format for date-times based upon a simplification of the ISO
>>>>>CM:GREEN
8601 Extended Format. The format is as follows: YYYY-MM-DDTHH:mm:ss.sssZ

>>>>>CM:GREEN
Where the fields are as follows:

>>>>>CM:GREEN
YYYY is the decimal digits of the year 0000 to 9999 in the Gregorian calendar.

>>>>>CM:GREEN
- “-” (hyphen) appears literally twice in the string.

>>>>>CM:GREEN
MM is the month of the year from 01 (January) to 12 (December).

>>>>>CM:GREEN
DD is the day of the month from 01 to 31.

>>>>>CM:GREEN
T “T” appears literally in the string, to indicate the beginning of the time element.

>>>>>CM:GREEN
HH is the number of complete hours that have passed since midnight as two decimal digits from 00 to
>>>>>CM:GREEN
24.

>>>>>CM:GREEN
: “:” (colon) appears literally twice in the string.

>>>>>CM:GREEN
mm is the number of complete minutes since the start of the hour as two decimal digits from 00 to
>>>>>CM:GREEN
59.

>>>>>CM:GREEN
ss is the number of complete seconds since the start of the minute as two decimal digits from 00 to
>>>>>CM:GREEN
59.

>>>>>CM:GREEN
. “.” (dot) appears literally in the string.

>>>>>CM:GREEN
sss is the number of complete milliseconds since the start of the second as three decimal digits.

>>>>>CM:GREEN
Z is the time zone offset specified as “Z” (for UTC) or either “+” or “-” followed by a time
>>>>>CM:GREEN
expression HH:mm

>>>>>CM:GREEN
This format includes date-only forms:

>>>>>CM:GREEN
~~~~ {.Note}
>>>>>CM:GREEN
YYYYYYYY-MMYYYY-MM-DD
>>>>>CM:GREEN
~~~~

>>>>>CM:GREEN
It also includes “date-time” forms that consist of one of the above date-only forms immediately
>>>>>CM:GREEN
followed by one of the following time forms with an optional time zone offset appended:

>>>>>CM:GREEN
    THH:mmTHH:mm:ssTHH:mm:ss.sss

>>>>>CM:GREEN
All numbers must be base 10. If the MM or DD fields are absent “01” is used as the value. If the HH,
>>>>>CM:GREEN
mm, or ss fields are absent “00” is used as the value and the value of an absent sss field is “000”.
>>>>>CM:GREEN
The value of an absent time zone offset is “Z”.

>>>>>CM:GREEN
Illegal values (out-of-bounds as well as syntax errors) in a format string means that the format
>>>>>CM:GREEN
string is not a valid instance of this format.

>>>>>CM:GREEN
NOTE 1 As every day both starts and ends with midnight, the two notations 00:00 and 24:00 are
>>>>>CM:GREEN
available to distinguish the two midnights that can be associated with one date. This means that the
>>>>>CM:GREEN
following two notations refer to exactly the same point in time: 1995-02-04T24:00 and
>>>>>CM:GREEN
1995-02-05T00:00

>>>>>CM:GREEN
NOTE 2 There exists no international standard that specifies abbreviations for civil time zones like
>>>>>CM:GREEN
CET, EST, etc. and sometimes the same abbreviation is even used for two very different time zones.
>>>>>CM:GREEN
For this reason, ISO 8601 and this format specifies numeric representations of date and time.

>>>>>CM:GREEN
15.9.1.15.1 Extended years
>>>>>CM:GREEN
==========================

>>>>>CM:GREEN
ECMAScript requires the ability to specify 6 digit years (extended years); approximately 285,426
>>>>>CM:GREEN
years, either forward or backward, from 01 January, 1970 UTC. To represent years before 0 or after
>>>>>CM:GREEN
9999, ISO 8601 permits the expansion of the year representation, but only by prior agreement between
>>>>>CM:GREEN
the sender and the receiver. In the simplified ECMAScript format such an expanded year
>>>>>CM:GREEN
representation shall have 2 extra year digits and is always prefixed with a + or – sign. The year 0
>>>>>CM:GREEN
is considered positive and hence prefixed with a + sign.

>>>>>CM:GREEN
NOTE Examples of extended years:

>>>>>CM:GREEN
-283457-03-21T15:00:59.008Z   283458 B.C.  
>>>>>CM:GREEN
-000001-01-01T00:00:00Z          2 B.C.  
>>>>>CM:GREEN
+000000-01-01T00:00:00Z         1 B.C.  
>>>>>CM:GREEN
+000001-01-01T00:00:00Z         1 A.D.  
>>>>>CM:GREEN
+001970-01-01T00:00:00Z         1970 A.D.  
>>>>>CM:GREEN
+002009-12-15T00:00:00Z         2009 A.D.  
>>>>>CM:GREEN
+287396-10-12T08:59:00.992Z 287396 A.D.

>>>>>CM:GREEN
15.9.2 The Date Constructor Called as a Function
>>>>>CM:GREEN
================================================

>>>>>CM:GREEN
When Date is called as a function rather than as a constructor, it returns a String representing the
>>>>>CM:GREEN
current time (UTC).

>>>>>CM:GREEN
NOTE The function call Date(…) is not equivalent to the object creation expression new Date(…) with
>>>>>CM:GREEN
the same arguments.

>>>>>CM:GREEN
15.9.2.1 Date ( [ year [, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] ] ] )
>>>>>CM:GREEN
============================================================================================

>>>>>CM:GREEN
All of the arguments are optional; any arguments supplied are accepted but are completely ignored. A
>>>>>CM:GREEN
String is created and returned as if by the expression (new Date()).toString() where Date is the
>>>>>CM:GREEN
standard built-in constructor with that name and toString is the standard built-in method
>>>>>CM:GREEN
Date.prototype.toString.

>>>>>CM:GREEN
15.9.3 The Date Constructor
>>>>>CM:GREEN
===========================

>>>>>CM:GREEN
When Date is called as part of a new expression, it is a constructor: it initialises the newly
>>>>>CM:GREEN
created object.

>>>>>CM:GREEN
15.9.3.1 new Date (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )
>>>>>CM:GREEN
=======================================================================================

>>>>>CM:GREEN
When Date is called with two to seven arguments, it computes the date from year, month, and
>>>>>CM:GREEN
(optionally) date, hours, minutes, seconds and ms.

>>>>>CM:GREEN
The [[Prototype]] internal property of the newly constructed object is set to the original Date
>>>>>CM:GREEN
prototype object, the one that is the initial value of Date.prototype (15.9.4.1).

>>>>>CM:GREEN
The [[Class]] internal property of the newly constructed object is set to "Date".

>>>>>CM:GREEN
The [[Extensible]] internal property of the newly constructed object is set to true.

>>>>>CM:GREEN
The [[PrimitiveValue]] internal property of the newly constructed object is set as follows:

>>>>>CM:GREEN
1.  Let y be ToNumber(year).
>>>>>CM:GREEN
2.  Let m be ToNumber(month).
>>>>>CM:GREEN
3.  If date is supplied then let dt be ToNumber(date); else let dt be 1.
>>>>>CM:GREEN
4.  If hours is supplied then let h be ToNumber(hours); else let h be 0.
>>>>>CM:GREEN
5.  If minutes is supplied then let min be ToNumber(minutes); else let min be 0.
>>>>>CM:GREEN
6.  If seconds is supplied then let s be ToNumber(seconds); else let s be 0.
>>>>>CM:GREEN
7.  If ms is supplied then let milli be ToNumber(ms); else let milli be 0.
>>>>>CM:GREEN
8.  If y is not NaN and 0 ≤ ToInteger(y) ≤ 99, then let yr be 1900+ToInteger(y); otherwise, let yr
>>>>>CM:GREEN
    be y.
>>>>>CM:GREEN
9.  Let finalDate be MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli)).
>>>>>CM:GREEN
10. Set the [[PrimitiveValue]] internal property of the newly constructed object to
>>>>>CM:GREEN
    TimeClip(UTC(finalDate)).

>>>>>CM:GREEN
15.9.3.2 new Date (value)
>>>>>CM:GREEN
=========================

>>>>>CM:GREEN
The [[Prototype]] internal property of the newly constructed object is set to the original Date
>>>>>CM:GREEN
prototype object, the one that is the initial value of Date.prototype (15.9.4.1).

>>>>>CM:GREEN
The [[Class]] internal property of the newly constructed object is set to "Date".

>>>>>CM:GREEN
The [[Extensible]] internal property of the newly constructed object is set to true.

>>>>>CM:GREEN
The [[PrimitiveValue]] internal property of the newly constructed object is set as follows:

>>>>>CM:GREEN
1.  Let v be ToPrimitive(value).
>>>>>CM:GREEN
2.  If Type(v) is String, then
>>>>>CM:GREEN
    1.  Parse v as a date, in exactly the same manner as for the parse method (15.9.4.2); let V be
>>>>>CM:GREEN
        the time value for this date.

>>>>>CM:GREEN
3.  Else, let V be ToNumber(v).
>>>>>CM:GREEN
4.  Set the [[PrimitiveValue]] internal property of the newly constructed object to TimeClip(V) and
>>>>>CM:GREEN
    return.

>>>>>CM:GREEN
15.9.3.3 new Date ( )
>>>>>CM:GREEN
=====================

>>>>>CM:GREEN
The [[Prototype]] internal property of the newly constructed object is set to the original Date
>>>>>CM:GREEN
prototype object, the one that is the initial value of Date.prototype (15.9.4.1).

>>>>>CM:GREEN
The [[Class]] internal property of the newly constructed object is set to "Date".

>>>>>CM:GREEN
The [[Extensible]] internal property of the newly constructed object is set to true.

>>>>>CM:GREEN
The [[PrimitiveValue]] internal property of the newly constructed object is set to the time value
>>>>>CM:GREEN
(UTC) identifying the current time.

>>>>>CM:GREEN
15.9.4 Properties of the Date Constructor
>>>>>CM:GREEN
=========================================

>>>>>CM:GREEN
The value of the [[Prototype]] internal property of the Date constructor is the Function prototype
>>>>>CM:GREEN
object (15.3.4).

>>>>>CM:GREEN
Besides the internal properties and the length property (whose value is 7), the Date constructor has
>>>>>CM:GREEN
the following properties:

>>>>>CM:GREEN
15.9.4.1 Date.prototype
>>>>>CM:GREEN
=======================

>>>>>CM:GREEN
The initial value of Date.prototype is the built-in Date prototype object (15.9.5).

>>>>>CM:GREEN
This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]:
>>>>>CM:GREEN
false }.

>>>>>CM:GREEN
15.9.4.2 Date.parse (string)
>>>>>CM:GREEN
============================

>>>>>CM:GREEN
The parse function applies the ToString operator to its argument and interprets the resulting String
>>>>>CM:GREEN
as a date and time; it returns a Number, the UTC time value corresponding to the date and time. The
>>>>>CM:GREEN
String may be interpreted as a local time, a UTC time, or a time in some other time zone, depending
>>>>>CM:GREEN
on the contents of the String. The function first attempts to parse the format of the String
>>>>>CM:GREEN
according to the rules called out in Date Time String Format (15.9.1.15). If the String does not
>>>>>CM:GREEN
conform to that format the function may fall back to any implementation-specific heuristics or
>>>>>CM:GREEN
implementation-specific date formats. Unrecognisable Strings or dates containing illegal element
>>>>>CM:GREEN
values in the format String shall cause Date.parse to return NaN.

>>>>>CM:GREEN
If x is any Date object whose milliseconds amount is zero within a particular implementation of
>>>>>CM:GREEN
ECMAScript, then all of the following expressions should produce the same numeric value in that
>>>>>CM:GREEN
implementation, if all the properties referenced have their initial values:

>>>>>CM:GREEN
    x.valueOf()

>>>>>CM:GREEN
    Date.parse(x.toString())

>>>>>CM:GREEN
    Date.parse(x.toUTCString())

>>>>>CM:GREEN
    Date.parse(x.toISOString())

>>>>>CM:GREEN
However, the expression

>>>>>CM:GREEN
Date.parse(x.toLocaleString())

>>>>>CM:GREEN
is not required to produce the same Number value as the preceding three expressions and, in general,
>>>>>CM:GREEN
the value produced by Date.parse is implementation-dependent when given any String value that does
>>>>>CM:GREEN
not conform to the Date Time String Format (15.9.1.15) and that could not be produced in that
>>>>>CM:GREEN
implementation by the toString or toUTCString method.

>>>>>CM:GREEN
15.9.4.3 Date.UTC (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )
>>>>>CM:GREEN
=======================================================================================

>>>>>CM:GREEN
When the UTC function is called with fewer than two arguments, the behaviour is
>>>>>CM:GREEN
implementation-dependent. When the UTC function is called with two to seven arguments, it computes
>>>>>CM:GREEN
the date from year, month and (optionally) date, hours, minutes, seconds and ms. The following steps
>>>>>CM:GREEN
are taken:

>>>>>CM:GREEN
1.  Let y be ToNumber(year).
>>>>>CM:GREEN
2.  Let m be ToNumber(month).
>>>>>CM:GREEN
3.  If date is supplied then let dt be ToNumber(date); else let dt be 1.
>>>>>CM:GREEN
4.  If hours is supplied then let h be ToNumber(hours); else let h be 0.
>>>>>CM:GREEN
5.  If minutes is supplied then let min be ToNumber(minutes); else let min be 0.
>>>>>CM:GREEN
6.  If seconds is supplied then let s be ToNumber(seconds); else let s be 0.
>>>>>CM:GREEN
7.  If ms is supplied then let milli be ToNumber(ms); else let milli be 0.
>>>>>CM:GREEN
8.  If y is not NaN and 0 ≤ ToInteger(y) ≤ 99, then let yr be 1900+ToInteger(y); otherwise, let yr
>>>>>CM:GREEN
    be y.
>>>>>CM:GREEN
9.  Return TimeClip(MakeDate(MakeDay(yr, m, dt), MakeTime(h, min, s, milli))).

>>>>>CM:GREEN
The length property of the UTC function is 7.

>>>>>CM:GREEN
NOTE The UTC function differs from the Date constructor in two ways: it returns a time value as a
>>>>>CM:GREEN
Number, rather than creating a Date object, and it interprets the arguments in UTC rather than as
>>>>>CM:GREEN
local time.

>>>>>CM:GREEN
15.9.4.4 Date.now ( )
>>>>>CM:GREEN
=====================

>>>>>CM:GREEN
The now function return a Number value that is the time value designating the UTC date and time of
>>>>>CM:GREEN
the occurrence of the call to now.

>>>>>CM:GREEN
15.9.5 Properties of the Date Prototype Object
>>>>>CM:GREEN
==============================================

>>>>>CM:GREEN
The Date prototype object is itself a Date object (its [[Class]] is "Date") whose [[PrimitiveValue]]
>>>>>CM:GREEN
is NaN.

>>>>>CM:GREEN
The value of the [[Prototype]] internal property of the Date prototype object is the standard
>>>>>CM:GREEN
built-in Object prototype object (15.2.4).

>>>>>CM:GREEN
In following descriptions of functions that are properties of the Date prototype object, the phrase
>>>>>CM:GREEN
“this Date object” refers to the object that is the this value for the invocation of the function.
>>>>>CM:GREEN
Unless explicitly noted otherwise, none of these functions are generic; a TypeError exception is
>>>>>CM:GREEN
thrown if the this value is not an object for which the value of the [[Class]] internal property is
>>>>>CM:GREEN
"Date". Also, the phrase “this time value” refers to the Number value for the time represented by
>>>>>CM:GREEN
this Date object, that is, the value of the [[PrimitiveValue]] internal property of this Date
>>>>>CM:GREEN
object.

>>>>>CM:GREEN
15.9.5.1 Date.prototype.constructor
>>>>>CM:GREEN
===================================

>>>>>CM:GREEN
The initial value of Date.prototype.constructor is the built-in Date constructor.

>>>>>CM:GREEN
15.9.5.2 Date.prototype.toString ( )
>>>>>CM:GREEN
====================================

>>>>>CM:GREEN
This function returns a String value. The contents of the String are implementation-dependent, but
>>>>>CM:GREEN
are intended to represent the Date in the current time zone in a convenient, human-readable form.

>>>>>CM:GREEN
NOTE For any Date value d whose milliseconds amount is zero, the result of Date.parse(d.toString())
>>>>>CM:GREEN
is equal to d.valueOf(). See 15.9.4.2.

>>>>>CM:GREEN
15.9.5.3 Date.prototype.toDateString ( )
>>>>>CM:GREEN
========================================

>>>>>CM:GREEN
This function returns a String value. The contents of the String are implementation-dependent, but
>>>>>CM:GREEN
are intended to represent the “date” portion of the Date in the current time zone in a convenient,
>>>>>CM:GREEN
human-readable form.

>>>>>CM:GREEN
15.9.5.4 Date.prototype.toTimeString ( )
>>>>>CM:GREEN
========================================

>>>>>CM:GREEN
This function returns a String value. The contents of the String are implementation-dependent, but
>>>>>CM:GREEN
are intended to represent the “time” portion of the Date in the current time zone in a convenient,
>>>>>CM:GREEN
human-readable form.

>>>>>CM:GREEN
15.9.5.5 Date.prototype.toLocaleString ( )
>>>>>CM:GREEN
==========================================

>>>>>CM:GREEN
This function returns a String value. The contents of the String are implementation-dependent, but
>>>>>CM:GREEN
are intended to represent the Date in the current time zone in a convenient, human-readable form
>>>>>CM:GREEN
that corresponds to the conventions of the host environment’s current locale.

>>>>>CM:GREEN
NOTE The first parameter to this function is likely to be used in a future version of this standard;
>>>>>CM:GREEN
it is recommended that implementations do not use this parameter position for anything else.

>>>>>CM:GREEN
15.9.5.6 Date.prototype.toLocaleDateString ( )
>>>>>CM:GREEN
==============================================

>>>>>CM:GREEN
This function returns a String value. The contents of the String are implementation-dependent, but
>>>>>CM:GREEN
are intended to represent the “date” portion of the Date in the current time zone in a convenient,
>>>>>CM:GREEN
human-readable form that corresponds to the conventions of the host environment’s current locale.

>>>>>CM:GREEN
NOTE The first parameter to this function is likely to be used in a future version of this standard;
>>>>>CM:GREEN
it is recommended that implementations do not use this parameter position for anything else.

>>>>>CM:GREEN
15.9.5.7 Date.prototype.toLocaleTimeString ( )
>>>>>CM:GREEN
==============================================

>>>>>CM:GREEN
This function returns a String value. The contents of the String are implementation-dependent, but
>>>>>CM:GREEN
are intended to represent the “time” portion of the Date in the current time zone in a convenient,
>>>>>CM:GREEN
human-readable form that corresponds to the conventions of the host environment’s current locale.

>>>>>CM:GREEN
NOTE The first parameter to this function is likely to be used in a future version of this standard;
>>>>>CM:GREEN
it is recommended that implementations do not use this parameter position for anything else.

>>>>>CM:GREEN
15.9.5.8 Date.prototype.valueOf ( )
>>>>>CM:GREEN
===================================

>>>>>CM:GREEN
The valueOf function returns a Number, which is this time value.

>>>>>CM:GREEN
15.9.5.9 Date.prototype.getTime ( )
>>>>>CM:GREEN
===================================

>>>>>CM:GREEN
1.  Return this time value.

>>>>>CM:GREEN
15.9.5.10 Date.prototype.getFullYear ( )
>>>>>CM:GREEN
========================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return YearFromTime(LocalTime(t)).

>>>>>CM:GREEN
15.9.5.11 Date.prototype.getUTCFullYear ( )
>>>>>CM:GREEN
===========================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return YearFromTime(t).

>>>>>CM:GREEN
15.9.5.12 Date.prototype.getMonth ( )
>>>>>CM:GREEN
=====================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return MonthFromTime(LocalTime(t)).

>>>>>CM:GREEN
15.9.5.13 Date.prototype.getUTCMonth ( )
>>>>>CM:GREEN
========================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return MonthFromTime(t).

>>>>>CM:GREEN
15.9.5.14 Date.prototype.getDate ( )
>>>>>CM:GREEN
====================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return DateFromTime(LocalTime(t)).

>>>>>CM:GREEN
15.9.5.15 Date.prototype.getUTCDate ( )
>>>>>CM:GREEN
=======================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return DateFromTime(t).

>>>>>CM:GREEN
15.9.5.16 Date.prototype.getDay ( )
>>>>>CM:GREEN
===================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return WeekDay(LocalTime(t)).

>>>>>CM:GREEN
15.9.5.17 Date.prototype.getUTCDay ( )
>>>>>CM:GREEN
======================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return WeekDay(t).

>>>>>CM:GREEN
15.9.5.18 Date.prototype.getHours ( )
>>>>>CM:GREEN
=====================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return HourFromTime(LocalTime(t)).

>>>>>CM:GREEN
15.9.5.19 Date.prototype.getUTCHours ( )
>>>>>CM:GREEN
========================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return HourFromTime(t).

>>>>>CM:GREEN
15.9.5.20 Date.prototype.getMinutes ( )
>>>>>CM:GREEN
=======================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return MinFromTime(LocalTime(t)).

>>>>>CM:GREEN
15.9.5.21 Date.prototype.getUTCMinutes ( )
>>>>>CM:GREEN
==========================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return MinFromTime(t).

>>>>>CM:GREEN
15.9.5.22 Date.prototype.getSeconds ( )
>>>>>CM:GREEN
=======================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return SecFromTime(LocalTime(t)).

>>>>>CM:GREEN
15.9.5.23 Date.prototype.getUTCSeconds ( )
>>>>>CM:GREEN
==========================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return SecFromTime(t).

>>>>>CM:GREEN
15.9.5.24 Date.prototype.getMilliseconds ( )
>>>>>CM:GREEN
============================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return msFromTime(LocalTime(t)).

>>>>>CM:GREEN
15.9.5.25 Date.prototype.getUTCMilliseconds ( )
>>>>>CM:GREEN
===============================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return msFromTime(t).

>>>>>CM:GREEN
15.9.5.26 Date.prototype.getTimezoneOffset ( )
>>>>>CM:GREEN
==============================================

>>>>>CM:GREEN
Returns the difference between local time and UTC time in minutes.

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  If t is NaN, return NaN.
>>>>>CM:GREEN
3.  Return (t − LocalTime(t)) / msPerMinute.

>>>>>CM:GREEN
15.9.5.27 Date.prototype.setTime (time)
>>>>>CM:GREEN
=======================================

>>>>>CM:GREEN
1.  Let v be TimeClip(ToNumber(time)).
>>>>>CM:GREEN
2.  Set the [[PrimitiveValue]] internal property of this Date object to v.
>>>>>CM:GREEN
3.  Return v.

>>>>>CM:GREEN
15.9.5.28 Date.prototype.setMilliseconds (ms)
>>>>>CM:GREEN
=============================================

>>>>>CM:GREEN
1.  Let t be the result of LocalTime(this time value).
>>>>>CM:GREEN
2.  Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ToNumber(ms)).
>>>>>CM:GREEN
3.  Let u be TimeClip(UTC(MakeDate(Day(t), time))).
>>>>>CM:GREEN
4.  Set the [[PrimitiveValue]] internal property of this Date object to u.
>>>>>CM:GREEN
5.  Return u.

>>>>>CM:GREEN
15.9.5.29 Date.prototype.setUTCMilliseconds (ms)
>>>>>CM:GREEN
================================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  Let time be MakeTime(HourFromTime(t), MinFromTime(t), SecFromTime(t), ToNumber(ms)).
>>>>>CM:GREEN
3.  Let v be TimeClip(MakeDate(Day(t), time)).
>>>>>CM:GREEN
4.  Set the [[PrimitiveValue]] internal property of this Date object to v.
>>>>>CM:GREEN
5.  Return v.

>>>>>CM:GREEN
15.9.5.30 Date.prototype.setSeconds (sec [, ms ] )
>>>>>CM:GREEN
==================================================

>>>>>CM:GREEN
If ms is not specified, this behaves as if ms were specified with the value getMilliseconds().

>>>>>CM:GREEN
1.  Let t be the result of LocalTime(this time value).
>>>>>CM:GREEN
2.  Let s be ToNumber(sec).
>>>>>CM:GREEN
3.  If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
>>>>>CM:GREEN
4.  Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).
>>>>>CM:GREEN
5.  Let u be TimeClip(UTC(date)).
>>>>>CM:GREEN
6.  Set the [[PrimitiveValue]] internal property of this Date object to u.
>>>>>CM:GREEN
7.  Return u.

>>>>>CM:GREEN
The length property of the setSeconds method is 2.

>>>>>CM:GREEN
15.9.5.31 Date.prototype.setUTCSeconds (sec [, ms ] )
>>>>>CM:GREEN
=====================================================

>>>>>CM:GREEN
If ms is not specified, this behaves as if ms were specified with the value getUTCMilliseconds().

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  Let s be ToNumber(sec).
>>>>>CM:GREEN
3.  If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
>>>>>CM:GREEN
4.  Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), MinFromTime(t), s, milli)).
>>>>>CM:GREEN
5.  Let v be TimeClip(date).
>>>>>CM:GREEN
6.  Set the [[PrimitiveValue]] internal property of this Date object to v.
>>>>>CM:GREEN
7.  Return v.

>>>>>CM:GREEN
The length property of the setUTCSeconds method is 2.

>>>>>CM:GREEN
15.9.5.32 Date.prototype.setMinutes (min [, sec [, ms ] ] )
>>>>>CM:GREEN
===========================================================

>>>>>CM:GREEN
If sec is not specified, this behaves as if sec were specified with the value getSeconds().

>>>>>CM:GREEN
If ms is not specified, this behaves as if ms were specified with the value getMilliseconds().

>>>>>CM:GREEN
1.  Let t be the result of LocalTime(this time value).
>>>>>CM:GREEN
2.  Let m be ToNumber(min).
>>>>>CM:GREEN
3.  If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).
>>>>>CM:GREEN
4.  If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
>>>>>CM:GREEN
5.  Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).
>>>>>CM:GREEN
6.  Let u be TimeClip(UTC(date)).
>>>>>CM:GREEN
7.  Set the [[PrimitiveValue]] internal property of this Date object to u.
>>>>>CM:GREEN
8.  Return u.

>>>>>CM:GREEN
The length property of the setMinutes method is 3.

>>>>>CM:GREEN
15.9.5.33 Date.prototype.setUTCMinutes (min [, sec [, ms ] ] )
>>>>>CM:GREEN
==============================================================

>>>>>CM:GREEN
If sec is not specified, this behaves as if sec were specified with the value getUTCSeconds().

>>>>>CM:GREEN
If ms is not specified, this function behaves as if ms were specified with the value return by
>>>>>CM:GREEN
getUTCMilliseconds().

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  Let m be ToNumber(min).
>>>>>CM:GREEN
3.  If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).
>>>>>CM:GREEN
4.  If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
>>>>>CM:GREEN
5.  Let date be MakeDate(Day(t), MakeTime(HourFromTime(t), m, s, milli)).
>>>>>CM:GREEN
6.  Let v be TimeClip(date).
>>>>>CM:GREEN
7.  Set the [[PrimitiveValue]] internal property of this Date object to v.
>>>>>CM:GREEN
8.  Return v.

>>>>>CM:GREEN
The length property of the setUTCMinutes method is 3.

>>>>>CM:GREEN
15.9.5.34 Date.prototype.setHours (hour [, min [, sec [, ms ] ] ] )
>>>>>CM:GREEN
===================================================================

>>>>>CM:GREEN
If min is not specified, this behaves as if min were specified with the value getMinutes().

>>>>>CM:GREEN
If sec is not specified, this behaves as if sec were specified with the value getSeconds().

>>>>>CM:GREEN
If ms is not specified, this behaves as if ms were specified with the value getMilliseconds().

>>>>>CM:GREEN
1.  Let t be the result of LocalTime(this time value).
>>>>>CM:GREEN
2.  Let h be ToNumber(hour).
>>>>>CM:GREEN
3.  If min is not specified, then let m be MinFromTime(t); otherwise, let m be ToNumber(min).
>>>>>CM:GREEN
4.  If If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).
>>>>>CM:GREEN
5.  If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
>>>>>CM:GREEN
6.  Let date be MakeDate(Day(t), MakeTime(h, m, s, milli)).
>>>>>CM:GREEN
7.  Let u be TimeClip(UTC(date)).
>>>>>CM:GREEN
8.  Set the [[PrimitiveValue]] internal property of this Date object to u.
>>>>>CM:GREEN
9.  Return u.

>>>>>CM:GREEN
The length property of the setHours method is 4.

>>>>>CM:GREEN
15.9.5.35 Date.prototype.setUTCHours (hour [, min [, sec [, ms ] ] ] )
>>>>>CM:GREEN
======================================================================

>>>>>CM:GREEN
If min is not specified, this behaves as if min were specified with the value getUTCMinutes().

>>>>>CM:GREEN
If sec is not specified, this behaves as if sec were specified with the value getUTCSeconds().

>>>>>CM:GREEN
If ms is not specified, this behaves as if ms were specified with the value getUTCMilliseconds().

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  Let h be ToNumber(hour).
>>>>>CM:GREEN
3.  If min is not specified, then let m be MinFromTime(t); otherwise, let m be ToNumber(min).
>>>>>CM:GREEN
4.  If sec is not specified, then let s be SecFromTime(t); otherwise, let s be ToNumber(sec).
>>>>>CM:GREEN
5.  If ms is not specified, then let milli be msFromTime(t); otherwise, let milli be ToNumber(ms).
>>>>>CM:GREEN
6.  Let newDate be MakeDate(Day(t), MakeTime(h, m, s, milli)).
>>>>>CM:GREEN
7.  Let v be TimeClip(newDate).
>>>>>CM:GREEN
8.  Set the [[PrimitiveValue]] internal property of this Date object to v.
>>>>>CM:GREEN
9.  Return v.

>>>>>CM:GREEN
The length property of the setUTCHours method is 4.

>>>>>CM:GREEN
15.9.5.36 Date.prototype.setDate (date)
>>>>>CM:GREEN
=======================================

>>>>>CM:GREEN
1.  Let t be the result of LocalTime(this time value).
>>>>>CM:GREEN
2.  Let dt be ToNumber(date).
>>>>>CM:GREEN
3.  Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).
>>>>>CM:GREEN
4.  Let u be TimeClip(UTC(newDate)).
>>>>>CM:GREEN
5.  Set the [[PrimitiveValue]] internal property of this Date object to u.
>>>>>CM:GREEN
6.  Return u.

>>>>>CM:GREEN
15.9.5.37 Date.prototype.setUTCDate (date)
>>>>>CM:GREEN
==========================================

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  Let dt be ToNumber(date).
>>>>>CM:GREEN
3.  Let newDate be MakeDate(MakeDay(YearFromTime(t), MonthFromTime(t), dt), TimeWithinDay(t)).
>>>>>CM:GREEN
4.  Let v be TimeClip(newDate).
>>>>>CM:GREEN
5.  Set the [[PrimitiveValue]] internal property of this Date object to v.
>>>>>CM:GREEN
6.  Return v.

>>>>>CM:GREEN
15.9.5.38 Date.prototype.setMonth (month [, date ] )
>>>>>CM:GREEN
====================================================

>>>>>CM:GREEN
If date is not specified, this behaves as if date were specified with the value getDate().

>>>>>CM:GREEN
1.  Let t be the result of LocalTime(this time value).
>>>>>CM:GREEN
2.  Let m be ToNumber(month).
>>>>>CM:GREEN
3.  If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).
>>>>>CM:GREEN
4.  Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).
>>>>>CM:GREEN
5.  Let u be TimeClip(UTC(newDate)).
>>>>>CM:GREEN
6.  Set the [[PrimitiveValue]] internal property of this Date object to u.
>>>>>CM:GREEN
7.  Return u.

>>>>>CM:GREEN
The length property of the setMonth method is 2.

>>>>>CM:GREEN
15.9.5.39 Date.prototype.setUTCMonth (month [, date ] )
>>>>>CM:GREEN
=======================================================

>>>>>CM:GREEN
If date is not specified, this behaves as if date were specified with the value getUTCDate().

>>>>>CM:GREEN
1.  Let t be this time value.
>>>>>CM:GREEN
2.  Let m be ToNumber(month).
>>>>>CM:GREEN
3.  If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).
>>>>>CM:GREEN
4.  Let newDate be MakeDate(MakeDay(YearFromTime(t), m, dt), TimeWithinDay(t)).
>>>>>CM:GREEN
5.  Let v be TimeClip(newDate).
>>>>>CM:GREEN
6.  Set the [[PrimitiveValue]] internal property of this Date object to v.
>>>>>CM:GREEN
7.  Return v.

>>>>>CM:GREEN
The length property of the setUTCMonth method is 2.

>>>>>CM:GREEN
15.9.5.40 Date.prototype.setFullYear (year [, month [, date ] ] )
>>>>>CM:GREEN
=================================================================

>>>>>CM:GREEN
If month is not specified, this behaves as if month were specified with the value getMonth().

>>>>>CM:GREEN
If date is not specified, this behaves as if date were specified with the value getDate().

>>>>>CM:GREEN
1.  Let t be the result of LocalTime(this time value); but if this time value is NaN, let t be +0.
>>>>>CM:GREEN
2.  Let y be ToNumber(year).
>>>>>CM:GREEN
3.  If month is not specified, then let m be MonthFromTime(t); otherwise, let m be ToNumber(month).
>>>>>CM:GREEN
4.  If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).
>>>>>CM:GREEN
5.  Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).
>>>>>CM:GREEN
6.  Let u be TimeClip(UTC(newDate)).
>>>>>CM:GREEN
7.  Set the [[PrimitiveValue]] internal property of this Date object to u.
>>>>>CM:GREEN
8.  Return u.

>>>>>CM:GREEN
The length property of the setFullYear method is 3.

>>>>>CM:GREEN
15.9.5.41 Date.prototype.setUTCFullYear (year [, month [, date ] ] )
>>>>>CM:GREEN
====================================================================

>>>>>CM:GREEN
If month is not specified, this behaves as if month were specified with the value getUTCMonth().

>>>>>CM:GREEN
If date is not specified, this behaves as if date were specified with the value getUTCDate().

>>>>>CM:GREEN
1.  Let t be this time value; but if this time value is NaN, let t be +0.
>>>>>CM:GREEN
2.  Let y be ToNumber(year).
>>>>>CM:GREEN
3.  If month is not specified, then let m be MonthFromTime(t); otherwise, let m be ToNumber(month).
>>>>>CM:GREEN
4.  If date is not specified, then let dt be DateFromTime(t); otherwise, let dt be ToNumber(date).
>>>>>CM:GREEN
5.  Let newDate be MakeDate(MakeDay(y, m, dt), TimeWithinDay(t)).
>>>>>CM:GREEN
6.  Let v be TimeClip(newDate).
>>>>>CM:GREEN
7.  Set the [[PrimitiveValue]] internal property of this Date object to v.
>>>>>CM:GREEN
8.  Return v.

>>>>>CM:GREEN
The length property of the setUTCFullYear method is 3.

>>>>>CM:GREEN
15.9.5.42 Date.prototype.toUTCString ( )
>>>>>CM:GREEN
========================================

>>>>>CM:GREEN
This function returns a String value. The contents of the String are implementation-dependent, but
>>>>>CM:GREEN
are intended to represent the Date in a convenient, human-readable form in UTC.

>>>>>CM:GREEN
NOTE The intent is to produce a String representation of a date that is more readable than the
>>>>>CM:GREEN
format specified in 15.9.1.15. It is not essential that the chosen format be unambiguous or easily
>>>>>CM:GREEN
machine parsable. If an implementation does not have a preferred human-readable format it is
>>>>>CM:GREEN
recommended to use the format defined in 15.9.1.15 but with a space rather than a “T” used to
>>>>>CM:GREEN
separate the date and time elements.

>>>>>CM:GREEN
15.9.5.43 Date.prototype.toISOString ( )
>>>>>CM:GREEN
========================================

>>>>>CM:GREEN
This function returns a String value represent the instance in time represented by this Date object.
>>>>>CM:GREEN
The format of the String is the Date Time string format defined in 15.9.1.15. All fields are present
>>>>>CM:GREEN
in the String. The time zone is always UTC, denoted by the suffix Z. If the time value of this
>>>>>CM:GREEN
object is not a finite Number a RangeError exception is thrown.

>>>>>CM:GREEN
15.9.5.44 Date.prototype.toJSON ( key )
>>>>>CM:GREEN
=======================================

>>>>>CM:GREEN
This function provides a String representation of a Date object for use by JSON.stringify (15.12.3).

>>>>>CM:GREEN
When the toJSON method is called with argument key, the following steps are taken:

>>>>>CM:GREEN
1.  Let O be the result of calling ToObject, giving it the this value as its argument.
>>>>>CM:GREEN
2.  Let tv be ToPrimitive(O, hint Number).
>>>>>CM:GREEN
3.  If tv is a Number and is not finite, return null.
>>>>>CM:GREEN
4.  Let toISO be the result of calling the [[Get]] internal method of O with argument "toISOString".
>>>>>CM:GREEN
5.  If IsCallable(toISO) is false, throw a TypeError exception.
>>>>>CM:GREEN
6.  Return the result of calling the [[Call]] internal method of toISO with O as the this value and
>>>>>CM:GREEN
    an empty argument list.

>>>>>CM:GREEN
NOTE 1 The argument is ignored.

>>>>>CM:GREEN
NOTE 2 The toJSON function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
Date object. Therefore, it can be transferred to other kinds of objects for use as a method.
>>>>>CM:GREEN
However, it does require that any such object have a toISOString method. An object is free to use
>>>>>CM:GREEN
the argument key to filter its stringification.

>>>>>CM:GREEN
15.9.6 Properties of Date Instances
>>>>>CM:GREEN
===================================

>>>>>CM:GREEN
Date instances inherit properties from the Date prototype object and their [[Class]] internal
>>>>>CM:GREEN
property value is "Date". Date instances also have a [[PrimitiveValue]] internal property.

>>>>>CM:GREEN
The [[PrimitiveValue]] internal property is time value represented by this Date object.
