>>>>>CM:GREEN
15.5 String Objects
>>>>>CM:GREEN
===================

>>>>>CM:GREEN
15.5.1 The String Constructor Called as a Function
>>>>>CM:GREEN
==================================================

>>>>>CM:GREEN
When String is called as a function rather than as a constructor, it performs a type conversion.

>>>>>CM:GREEN
15.5.1.1 String ( [ value ] )
>>>>>CM:GREEN
=============================

>>>>>CM:GREEN
Returns a String value (not a String object) computed by ToString(value). If value is not supplied,
>>>>>CM:GREEN
the empty String "" is returned.

>>>>>CM:GREEN
15.5.2 The String Constructor
>>>>>CM:GREEN
=============================

>>>>>CM:GREEN
When String is called as part of a new expression, it is a constructor: it initialises the newly
>>>>>CM:GREEN
created object.

>>>>>CM:GREEN
15.5.2.1 new String ( [ value ] )
>>>>>CM:GREEN
=================================

>>>>>CM:GREEN
The [[Prototype]] internal property of the newly constructed object is set to the standard built-in
>>>>>CM:GREEN
String prototype object that is the initial value of String.prototype (15.5.3.1).

>>>>>CM:GREEN
The [[Class]] internal property of the newly constructed object is set to "String".

>>>>>CM:GREEN
The [[Extensible]] internal property of the newly constructed object is set to true.

>>>>>CM:GREEN
The [[PrimitiveValue]] internal property of the newly constructed object is set to ToString(value),
>>>>>CM:GREEN
or to the empty String if value is not supplied.

>>>>>CM:GREEN
15.5.3 Properties of the String Constructor
>>>>>CM:GREEN
===========================================

>>>>>CM:GREEN
The value of the [[Prototype]] internal property of the String constructor is the standard built-in
>>>>>CM:GREEN
Function prototype object (15.3.4).

>>>>>CM:GREEN
Besides the internal properties and the length property (whose value is 1), the String constructor
>>>>>CM:GREEN
has the following properties:

>>>>>CM:GREEN
15.5.3.1 String.prototype
>>>>>CM:GREEN
=========================

>>>>>CM:GREEN
The initial value of String.prototype is the standard built-in String prototype object (15.5.4).

>>>>>CM:GREEN
This property has the attributes { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]:
>>>>>CM:GREEN
false }.

>>>>>CM:GREEN
15.5.3.2 String.fromCharCode ( [ char0 [ , char1 [ , … ] ] ] )
>>>>>CM:GREEN
==============================================================

>>>>>CM:GREEN
Returns a String value containing as many characters as the number of arguments. Each argument
>>>>>CM:GREEN
specifies one character of the resulting String, with the first argument specifying the first
>>>>>CM:GREEN
character, and so on, from left to right. An argument is converted to a character by applying the
>>>>>CM:GREEN
operation ToUint16 (9.7) and regarding the resulting 16-bit integer as the code unit value of a
>>>>>CM:GREEN
character. If no arguments are supplied, the result is the empty String.

>>>>>CM:GREEN
The length property of the fromCharCode function is 1.

>>>>>CM:GREEN
15.5.4 Properties of the String Prototype Object
>>>>>CM:GREEN
================================================

>>>>>CM:GREEN
The String prototype object is itself a String object (its [[Class]] is "String") whose value is an
>>>>>CM:GREEN
empty String.

>>>>>CM:GREEN
The value of the [[Prototype]] internal property of the String prototype object is the standard
>>>>>CM:GREEN
built-in Object prototype object (15.2.4).

>>>>>CM:GREEN
15.5.4.1 String.prototype.constructor
>>>>>CM:GREEN
=====================================

>>>>>CM:GREEN
The initial value of String.prototype.constructor is the built-in String constructor.

>>>>>CM:GREEN
15.5.4.2 String.prototype.toString ( )
>>>>>CM:GREEN
======================================

>>>>>CM:GREEN
Returns this String value. (Note that, for a String object, the toString method happens to return
>>>>>CM:GREEN
the same thing as the valueOf method.)

>>>>>CM:GREEN
The toString function is not generic; it throws a TypeError exception if its this value is not a
>>>>>CM:GREEN
String or a String object. Therefore, it cannot be transferred to other kinds of objects for use as
>>>>>CM:GREEN
a method.

>>>>>CM:GREEN
15.5.4.3 String.prototype.valueOf ( )
>>>>>CM:GREEN
=====================================

>>>>>CM:GREEN
Returns this String value.

>>>>>CM:GREEN
The valueOf function is not generic; it throws a TypeError exception if its this value is not a
>>>>>CM:GREEN
String or String object. Therefore, it cannot be transferred to other kinds of objects for use as a
>>>>>CM:GREEN
method.

>>>>>CM:GREEN
15.5.4.4 String.prototype.charAt (pos)
>>>>>CM:GREEN
======================================

>>>>>CM:GREEN
Returns a String containing the character at position pos in the String resulting from converting
>>>>>CM:GREEN
this object to a String. If there is no character at that position, the result is the empty String.
>>>>>CM:GREEN
The result is a String value, not a String object.

>>>>>CM:GREEN
If pos is a value of Number type that is an integer, then the result of x.charAt(pos) is equal to
>>>>>CM:GREEN
the result of x.substring(pos, pos+1).

>>>>>CM:GREEN
When the charAt method is called with one argument pos, the following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let position be ToInteger(pos).
>>>>>CM:GREEN
4.  Let size be the number of characters in S.
>>>>>CM:GREEN
5.  If position < 0 or position ≥ size, return the empty String.
>>>>>CM:GREEN
6.  Return a String of length 1, containing one character from S, namely the character at position
>>>>>CM:GREEN
    position, where the first (leftmost) character in S is considered to be at position 0, the next
>>>>>CM:GREEN
    one at position 1, and so on.

>>>>>CM:GREEN
NOTE The charAt function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.5 String.prototype.charCodeAt (pos)
>>>>>CM:GREEN
==========================================

>>>>>CM:GREEN
Returns a Number (a nonnegative integer less than 2^16) representing the code unit value of the
>>>>>CM:GREEN
character at position pos in the String resulting from converting this object to a String. If there
>>>>>CM:GREEN
is no character at that position, the result is NaN.

>>>>>CM:GREEN
When the charCodeAt method is called with one argument pos, the following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let position be ToInteger(pos).
>>>>>CM:GREEN
4.  Let size be the number of characters in S.
>>>>>CM:GREEN
5.  If position < 0 or position ≥ size, return NaN.
>>>>>CM:GREEN
6.  Return a value of Number type, whose value is the code unit value of the character at position
>>>>>CM:GREEN
    position in the String S, where the first (leftmost) character in S is considered to be at
>>>>>CM:GREEN
    position 0, the next one at position 1, and so on.

>>>>>CM:GREEN
NOTE The charCodeAt function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.6 String.prototype.concat ( [ string1 [ , string2 [ , … ] ] ] )
>>>>>CM:GREEN
======================================================================

>>>>>CM:GREEN
When the concat method is called with zero or more arguments string1, string2, etc., it returns a
>>>>>CM:GREEN
String consisting of the characters of this object (converted to a String) followed by the
>>>>>CM:GREEN
characters of each of string1, string2, etc. (where each argument is converted to a String). The
>>>>>CM:GREEN
result is a String value, not a String object. The following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let args be an internal list that is a copy of the argument list passed to this function.
>>>>>CM:GREEN
4.  Let R be S.
>>>>>CM:GREEN
5.  Repeat, while args is not empty
>>>>>CM:GREEN
    1.  Remove the first element from args and let next be the value of that element.
>>>>>CM:GREEN
    2.  Let R be the String value consisting of the characters in the previous value of R followed
>>>>>CM:GREEN
        by the characters of ToString(next).

>>>>>CM:GREEN
6.  Return R.

>>>>>CM:GREEN
The length property of the concat method is 1.

>>>>>CM:GREEN
NOTE The concat function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.7 String.prototype.indexOf (searchString, position)
>>>>>CM:GREEN
==========================================================

>>>>>CM:GREEN
If searchString appears as a substring of the result of converting this object to a String, at one
>>>>>CM:GREEN
or more positions that are greater than or equal to position, then the index of the smallest such
>>>>>CM:GREEN
position is returned; otherwise, ‑1 is returned. If position is undefined, 0 is assumed, so as to
>>>>>CM:GREEN
search all of the String.

>>>>>CM:GREEN
The indexOf method takes two arguments, searchString and position, and performs the following steps:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let searchStr be ToString(searchString).
>>>>>CM:GREEN
4.  Let pos be ToInteger(position). (If position is undefined, this step produces the value 0).
>>>>>CM:GREEN
5.  Let len be the number of characters in S.
>>>>>CM:GREEN
6.  Let start be min(max(pos, 0), len).
>>>>>CM:GREEN
7.  Let searchLen be the number of characters in searchStr.
>>>>>CM:GREEN
8.  Return the smallest possible integer k not smaller than start such that k+ searchLen is not
>>>>>CM:GREEN
    greater than len, and for all nonnegative integers j less than searchLen, the character at
>>>>>CM:GREEN
    position k+j of S is the same as the character at position j of searchStr; but if there is no
>>>>>CM:GREEN
    such integer k, then return the value -1.

>>>>>CM:GREEN
The length property of the indexOf method is 1.

>>>>>CM:GREEN
NOTE The indexOf function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.8 String.prototype.lastIndexOf (searchString, position)
>>>>>CM:GREEN
==============================================================

>>>>>CM:GREEN
If searchString appears as a substring of the result of converting this object to a String at one or
>>>>>CM:GREEN
more positions that are smaller than or equal to position, then the index of the greatest such
>>>>>CM:GREEN
position is returned; otherwise, ‑1 is returned. If position is undefined, the length of the String
>>>>>CM:GREEN
value is assumed, so as to search all of the String.

>>>>>CM:GREEN
The lastIndexOf method takes two arguments, searchString and position, and performs the following
>>>>>CM:GREEN
steps:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let searchStr be ToString(searchString).
>>>>>CM:GREEN
4.  Let numPos be ToNumber(position). (If position is undefined, this step produces the value NaN).
>>>>>CM:GREEN
5.  If numPos is NaN, let pos be +∞; otherwise, let pos be ToInteger(numPos).
>>>>>CM:GREEN
6.  Let len be the number of characters in S.
>>>>>CM:GREEN
7.  Let start min(max(pos, 0), len).
>>>>>CM:GREEN
8.  Let searchLen be the number of characters in searchStr.
>>>>>CM:GREEN
9.  Return the largest possible nonnegative integer k not larger than start such that k+ searchLen
>>>>>CM:GREEN
    is not greater than len, and for all nonnegative integers j less than searchLen, the character
>>>>>CM:GREEN
    at position k+j of S is the same as the character at position j of searchStr; but if there is no
>>>>>CM:GREEN
    such integer k, then return the value -1.

>>>>>CM:GREEN
The length property of the lastIndexOf method is 1.

>>>>>CM:GREEN
NOTE The lastIndexOf function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.9 String.prototype.localeCompare (that)
>>>>>CM:GREEN
==============================================

>>>>>CM:GREEN
When the localeCompare method is called with one argument that, it returns a Number other than NaN
>>>>>CM:GREEN
that represents the result of a locale-sensitive String comparison of the this value (converted to a
>>>>>CM:GREEN
String) with that (converted to a String). The two Strings are S and That. The two Strings are
>>>>>CM:GREEN
compared in an implementation-defined fashion. The result is intended to order String values in the
>>>>>CM:GREEN
sort order specified by the system default locale, and will be negative, zero, or positive,
>>>>>CM:GREEN
depending on whether S comes before That in the sort order, the Strings are equal, or S comes after
>>>>>CM:GREEN
That in the sort order, respectively.

>>>>>CM:GREEN
Before perform the comparisons the following steps are performed to prepare the Strings:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let That be ToString(that).

>>>>>CM:GREEN
The localeCompare method, if considered as a function of two arguments this and that, is a
>>>>>CM:GREEN
consistent comparison function (as defined in 15.4.4.11) on the set of all Strings.

>>>>>CM:GREEN
The actual return values are implementation-defined to permit implementers to encode additional
>>>>>CM:GREEN
information in the value, but the function is required to define a total ordering on all Strings and
>>>>>CM:GREEN
to return 0 when comparing Strings that are considered canonically equivalent by the Unicode
>>>>>CM:GREEN
standard.

>>>>>CM:GREEN
If no language-sensitive comparison at all is available from the host environment, this function may
>>>>>CM:GREEN
perform a bitwise comparison.

>>>>>CM:GREEN
NOTE 1 The localeCompare method itself is not directly suitable as an argument to
>>>>>CM:GREEN
Array.prototype.sort because the latter requires a function of two arguments.

>>>>>CM:GREEN
NOTE 2 This function is intended to rely on whatever language-sensitive comparison functionality is
>>>>>CM:GREEN
available to the ECMAScript environment from the host environment, and to compare according to the
>>>>>CM:GREEN
rules of the host environment’s current locale. It is strongly recommended that this function treat
>>>>>CM:GREEN
Strings that are canonically equivalent according to the Unicode standard as identical (in other
>>>>>CM:GREEN
words, compare the Strings as if they had both been converted to Normalised Form C or D first). It
>>>>>CM:GREEN
is also recommended that this function not honour Unicode compatibility equivalences or
>>>>>CM:GREEN
decompositions.

>>>>>CM:GREEN
NOTE 3 The second parameter to this function is likely to be used in a future version of this
>>>>>CM:GREEN
standard; it is recommended that implementations do not use this parameter position for anything
>>>>>CM:GREEN
else.

>>>>>CM:GREEN
NOTE 4 The localeCompare function is intentionally generic; it does not require that its this value
>>>>>CM:GREEN
be a String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.10 String.prototype.match (regexp)
>>>>>CM:GREEN
=========================================

>>>>>CM:GREEN
When the match method is called with argument regexp, the following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  If Type(regexp) is Object and the value of the [[Class]] internal property of regexp is
>>>>>CM:GREEN
    "RegExp", then let rx be regexp;
>>>>>CM:GREEN
4.  Else, let rx be a new RegExp object created as if by the expression
>>>>>CM:GREEN
    new               RegExp(regexp) where RegExp is the standard built-in constructor with that
>>>>>CM:GREEN
    name.
>>>>>CM:GREEN
5.  Let global be the result of calling the [[Get]] internal method of rx with argument "global".
>>>>>CM:GREEN
6.  Let exec be the standard built-in function RegExp.prototype.exec (see 15.10.6.2)
>>>>>CM:GREEN
7.  If global is not true, then
>>>>>CM:GREEN
    1.  Return the result of calling the [[Call]] internal method of exec with rx as the this value
>>>>>CM:GREEN
        and argument list containing S.

>>>>>CM:GREEN
8.  Else, global is true
>>>>>CM:GREEN
    1.  Call the [[Put]] internal method of rx with arguments "lastIndex" and 0.
>>>>>CM:GREEN
    2.  Let A be a new array created as if by the expression new Array() where Array is the standard
>>>>>CM:GREEN
        built-in constructor with that name.
>>>>>CM:GREEN
    3.  Let previousLastIndex be 0.
>>>>>CM:GREEN
    4.  Let n be 0.
>>>>>CM:GREEN
    5.  Let lastMatch be true.
>>>>>CM:GREEN
    6.  Repeat, while lastMatch is true
>>>>>CM:GREEN
        1.  Let result be the result of calling the [[Call]] internal method of exec with rx as the
>>>>>CM:GREEN
            this value and argument list containing S.
>>>>>CM:GREEN
        2.  If result is null, then set lastMatch to false.
>>>>>CM:GREEN
        3.  Else, result is not null
>>>>>CM:GREEN
            1.  Let thisIndex be the result of calling the [[Get]] internal method of rx with
>>>>>CM:GREEN
                argument "lastIndex".
>>>>>CM:GREEN
            2.  If thisIndex = previousLastIndex then
>>>>>CM:GREEN
                1.  Call the [[Put]] internal method of rx with arguments "lastIndex" and
>>>>>CM:GREEN
                    thisIndex+1.
>>>>>CM:GREEN
                2.  Set previousLastIndex to thisIndex+1.

>>>>>CM:GREEN
            3.  Else, set previousLastIndex to thisIndex.
>>>>>CM:GREEN
            4.  Let matchStr be the result of calling the [[Get]] internal method of result with
>>>>>CM:GREEN
                argument "0".
>>>>>CM:GREEN
            5.  Call the [[DefineOwnProperty]] internal method of A with arguments ToString(n), the
>>>>>CM:GREEN
                Property Descriptor {[[Value]]: matchStr, [[Writable]]: true, [[Enumerable]]: true,
>>>>>CM:GREEN
                [[configurable]]: true}, and false.
>>>>>CM:GREEN
            6.  Increment n.

>>>>>CM:GREEN
    7.  If n = 0, then return null.
>>>>>CM:GREEN
    8.  Return A.

>>>>>CM:GREEN
NOTE The match function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.11 String.prototype.replace (searchValue, replaceValue)
>>>>>CM:GREEN
==============================================================

>>>>>CM:GREEN
First set string according to the following steps:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let string be the result of calling ToString, giving it the this value as its argument.

>>>>>CM:GREEN
If searchValue is a regular expression (an object whose [[Class]] internal property is "RegExp"), do
>>>>>CM:GREEN
the following: If searchValue.global is false, then search string for the first match of the regular
>>>>>CM:GREEN
expression searchValue. If searchValue.global is true, then search string for all matches of the
>>>>>CM:GREEN
regular expression searchValue. Do the search in the same manner as in String.prototype.match,
>>>>>CM:GREEN
including the update of searchValue.lastIndex. Let m be the number of left capturing parentheses in
>>>>>CM:GREEN
searchValue (using NcapturingParens as specified in 15.10.2.1).

>>>>>CM:GREEN
If searchValue is not a regular expression, let searchString be ToString(searchValue) and search
>>>>>CM:GREEN
string for the first occurrence of searchString. Let m be 0.

>>>>>CM:GREEN
If replaceValue is a function, then for each matched substring, call the function with the following
>>>>>CM:GREEN
m + 3 arguments. Argument 1 is the substring that matched. If searchValue is a regular expression,
>>>>>CM:GREEN
the next m arguments are all of the captures in the MatchResult (see 15.10.2.1). Argument m + 2 is
>>>>>CM:GREEN
the offset within string where the match occurred, and argument m + 3 is string. The result is a
>>>>>CM:GREEN
String value derived from the original input by replacing each matched substring with the
>>>>>CM:GREEN
corresponding return value of the function call, converted to a String if need be.

>>>>>CM:GREEN
Otherwise, let newstring denote the result of converting replaceValue to a String. The result is a
>>>>>CM:GREEN
String value derived from the original input String by replacing each matched substring with a
>>>>>CM:GREEN
String derived from newstring by replacing characters in newstring by replacement text as specified
>>>>>CM:GREEN
in Table 22. These $ replacements are done left-to-right, and, once such a replacement is performed,
>>>>>CM:GREEN
the new replacement text is not subject to further replacements. For example,
>>>>>CM:GREEN
"$1,$2".replace(/(\$(\d))/g, "$$1-$1$2") returns "$1-$11,$1-$22". A $ in newstring that does not
>>>>>CM:GREEN
match any of the forms below is left as is.

>>>>>CM:GREEN
Table 22 — Replacement Text Symbol Substitutions

>>>>>CM:GREEN
  Characters   Replacement text
>>>>>CM:GREEN
  ------------ --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>>>>>CM:GREEN
  $$           $
>>>>>CM:GREEN
  $&           The matched substring.
>>>>>CM:GREEN
  $‘           The portion of string that precedes the matched substring.
>>>>>CM:GREEN
  $’           The portion of string that follows the matched substring.
>>>>>CM:GREEN
  $n           The nth capture, where n is a single digit in the range 1 to 9 and $n is not followed by a decimal digit. If n≤m and the nth capture is undefined, use the empty String instead. If n>m, the result is implementation-defined.
>>>>>CM:GREEN
  $nn          The nnth capture, where nn is a two-digit decimal number in the range 01 to 99. If nn≤m and the nnth capture is undefined, use the empty String instead. If nn>m, the result is implementation-defined.

>>>>>CM:GREEN
NOTE The replace function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.12 String.prototype.search (regexp)
>>>>>CM:GREEN
==========================================

>>>>>CM:GREEN
When the search method is called with argument regexp, the following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let string be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  If Type(regexp) is Object and the value of the [[Class]] internal property of regexp is
>>>>>CM:GREEN
    "RegExp", then let rx be regexp;
>>>>>CM:GREEN
4.  Else, let rx be a new RegExp object created as if by the expression
>>>>>CM:GREEN
    new               RegExp(regexp) where RegExp is the standard built-in constructor with that
>>>>>CM:GREEN
    name.
>>>>>CM:GREEN
5.  Search the value string from its beginning for an occurrence of the regular expression pattern
>>>>>CM:GREEN
    rx. Let result be a Number indicating the offset within string where the pattern matched, or –1
>>>>>CM:GREEN
    if there was no match. The lastIndex and global properties of regexp are ignored when performing
>>>>>CM:GREEN
    the search. The lastIndex property of regexp is left unchanged.
>>>>>CM:GREEN
6.  Return result.

>>>>>CM:GREEN
NOTE The search function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.13 String.prototype.slice (start, end)
>>>>>CM:GREEN
=============================================

>>>>>CM:GREEN
The slice method takes two arguments, start and end, and returns a substring of the result of
>>>>>CM:GREEN
converting this object to a String, starting from character position start and running to, but not
>>>>>CM:GREEN
including, character position end (or through the end of the String if end is undefined). If start
>>>>>CM:GREEN
is negative, it is treated as sourceLength+start where sourceLength is the length of the String. If
>>>>>CM:GREEN
end is negative, it is treated as sourceLength+end where sourceLength is the length of the String.
>>>>>CM:GREEN
The result is a String value, not a String object. The following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let len be the number of characters in S.
>>>>>CM:GREEN
4.  Let intStart be ToInteger(start).
>>>>>CM:GREEN
5.  If end is undefined, let intEnd be len; else let intEnd be ToInteger(end).
>>>>>CM:GREEN
6.  If intStart is negative, let from be max(len + intStart,0); else let from be min(intStart, len).
>>>>>CM:GREEN
7.  If intEnd is negative, let to be max(len + intEnd,0); else let to be min(intEnd, len).
>>>>>CM:GREEN
8.  Let span be max(to – from,0).
>>>>>CM:GREEN
9.  Return a String containing span consecutive characters from S beginning with the character at
>>>>>CM:GREEN
    position from.

>>>>>CM:GREEN
The length property of the slice method is 2.

>>>>>CM:GREEN
NOTE The slice function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.14 String.prototype.split (separator, limit)
>>>>>CM:GREEN
===================================================

>>>>>CM:GREEN
Returns an Array object into which substrings of the result of converting this object to a String
>>>>>CM:GREEN
have been stored. The substrings are determined by searching from left to right for occurrences of
>>>>>CM:GREEN
separator; these occurrences are not part of any substring in the returned array, but serve to
>>>>>CM:GREEN
divide up the String value. The value of separator may be a String of any length or it may be a
>>>>>CM:GREEN
RegExp object (i.e., an object whose [[Class]] internal property is "RegExp"; see 15.10).

>>>>>CM:GREEN
The value of separator may be an empty String, an empty regular expression, or a regular expression
>>>>>CM:GREEN
that can match an empty String. In this case, separator does not match the empty substring at the
>>>>>CM:GREEN
beginning or end of the input String, nor does it match the empty substring at the end of the
>>>>>CM:GREEN
previous separator match. (For example, if separator is the empty String, the String is split up
>>>>>CM:GREEN
into individual characters; the length of the result array equals the length of the String, and each
>>>>>CM:GREEN
substring contains one character.) If separator is a regular expression, only the first match at a
>>>>>CM:GREEN
given position of the this String is considered, even if backtracking could yield a
>>>>>CM:GREEN
non-empty-substring match at that position. (For example, "ab".split(/a*?/) evaluates to the array
>>>>>CM:GREEN
["a","b"], while "ab".split(/a*/) evaluates to the array["","b"].)

>>>>>CM:GREEN
If the this object is (or converts to) the empty String, the result depends on whether separator can
>>>>>CM:GREEN
match the empty String. If it can, the result array contains no elements. Otherwise, the result
>>>>>CM:GREEN
array contains one element, which is the empty String.

>>>>>CM:GREEN
If separator is a regular expression that contains capturing parentheses, then each time separator
>>>>>CM:GREEN
is matched the results (including any undefined results) of the capturing parentheses are spliced
>>>>>CM:GREEN
into the output array. For example,

>>>>>CM:GREEN
    "A<B>bold</B>and<CODE>coded</CODE>".split(/<(\/)?([^<>]+)>/)

>>>>>CM:GREEN
evaluates to the array

>>>>>CM:GREEN
    ["A", undefined, "B", "bold", "/", "B", "and", undefined, "CODE", "coded", "/", "CODE", ""]

>>>>>CM:GREEN
If separator is undefined, then the result array contains just one String, which is the this value
>>>>>CM:GREEN
(converted to a String). If limit is not undefined, then the output array is truncated so that it
>>>>>CM:GREEN
contains no more than limit elements.

>>>>>CM:GREEN
When the split method is called, the following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let A be a new array created as if by the expression new Array()where Array is the standard
>>>>>CM:GREEN
    built-in constructor with that name.
>>>>>CM:GREEN
4.  Let lengthA be 0.
>>>>>CM:GREEN
5.  If limit is undefined, let lim = 2^32–1; else let lim = ToUint32(limit).
>>>>>CM:GREEN
6.  Let s be the number of characters in S.
>>>>>CM:GREEN
7.  Let p = 0.
>>>>>CM:GREEN
8.  If separator is a RegExp object (its [[Class]] is "RegExp"), let R = separator; otherwise let R
>>>>>CM:GREEN
    = ToString(separator).
>>>>>CM:GREEN
9.  If lim = 0, return A.
>>>>>CM:GREEN
10. If separator is undefined, then
>>>>>CM:GREEN
    1.  Call the [[DefineOwnProperty]] internal method of A with arguments "0", Property Descriptor
>>>>>CM:GREEN
        {[[Value]]: S, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
>>>>>CM:GREEN
    2.  Return A.

>>>>>CM:GREEN
11. If s = 0, then
>>>>>CM:GREEN
    1.  Call SplitMatch(S, 0, R) and let z be its MatchResult result.
>>>>>CM:GREEN
    2.  If z is not failure, return A.
>>>>>CM:GREEN
    3.  Call the [[DefineOwnProperty]] internal method of A with arguments "0", Property Descriptor
>>>>>CM:GREEN
        {[[Value]]: S, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and false.
>>>>>CM:GREEN
    4.  Return A.

>>>>>CM:GREEN
12. Let q = p.
>>>>>CM:GREEN
13. Repeat, while q ≠ s
>>>>>CM:GREEN
    1.  Call SplitMatch(S, q, R) and let z be its MatchResult result.
>>>>>CM:GREEN
    2.  If z is failure, then let q = q+1.
>>>>>CM:GREEN
    3.  Else, z is not failure
>>>>>CM:GREEN
        1.  z must be a State. Let e be z’s endIndex and let cap be z’s captures array.
>>>>>CM:GREEN
        2.  If e = p, then let q = q+1.
>>>>>CM:GREEN
        3.  Else, e ≠ p
>>>>>CM:GREEN
            1.  Let T be a String value equal to the substring of S consisting of the characters at
>>>>>CM:GREEN
                positions p (inclusive) through q (exclusive).
>>>>>CM:GREEN
            2.  Call the [[DefineOwnProperty]] internal method of A with arguments
>>>>>CM:GREEN
                ToString(lengthA), Property Descriptor {[[Value]]: T, [[Writable]]: true,
>>>>>CM:GREEN
                [[Enumerable]]: true, [[Configurable]]: true}, and false.
>>>>>CM:GREEN
            3.  Increment lengthA by 1.
>>>>>CM:GREEN
            4.  If lengthA = lim, return A.
>>>>>CM:GREEN
            5.  Let p = e.
>>>>>CM:GREEN
            6.  Let i = 0.
>>>>>CM:GREEN
            7.  Repeat, while i is not equal to the number of elements in cap.
>>>>>CM:GREEN
                1.  Let i = i+1.
>>>>>CM:GREEN
                2.  Call the [[DefineOwnProperty]] internal method of A with arguments
>>>>>CM:GREEN
                    ToString(lengthA), Property Descriptor {[[Value]]: cap[i], [[Writable]]: true,
>>>>>CM:GREEN
                    [[Enumerable]]: true, [[Configurable]]: true}, and false.
>>>>>CM:GREEN
                3.  Increment lengthA by 1.
>>>>>CM:GREEN
                4.  If lengthA = lim, return A.

>>>>>CM:GREEN
            8.  Let q = p.

>>>>>CM:GREEN
14. Let T be a String value equal to the substring of S consisting of the characters at positions p
>>>>>CM:GREEN
    (inclusive) through s (exclusive).
>>>>>CM:GREEN
15. Call the [[DefineOwnProperty]] internal method of A with arguments ToString(lengthA), Property
>>>>>CM:GREEN
    Descriptor {[[Value]]: T, [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true}, and
>>>>>CM:GREEN
    false.
>>>>>CM:GREEN
16. Return A.

>>>>>CM:GREEN
The abstract operation SplitMatch takes three parameters, a String S, an integer q, and a String or
>>>>>CM:GREEN
RegExp R, and performs the following in order to return a MatchResult (see 15.10.2.1):

>>>>>CM:GREEN
1.  If R is a RegExp object (its [[Class]] is "RegExp"), then
>>>>>CM:GREEN
    1.  Call the [[Match]] internal method of R giving it the arguments S and q, and return the
>>>>>CM:GREEN
        MatchResult result.

>>>>>CM:GREEN
2.  Type(R) must be String. Let r be the number of characters in R.
>>>>>CM:GREEN
3.  Let s be the number of characters in S.
>>>>>CM:GREEN
4.  If q+r > s then return the MatchResult failure.
>>>>>CM:GREEN
5.  If there exists an integer i between 0 (inclusive) and r (exclusive) such that the character at
>>>>>CM:GREEN
    position q+i of S is different from the character at position i of R, then return failure.
>>>>>CM:GREEN
6.  Let cap be an empty array of captures (see 15.10.2.1).
>>>>>CM:GREEN
7.  Return the State (q+r, cap). (see 15.10.2.1)

>>>>>CM:GREEN
The length property of the split method is 2.

>>>>>CM:GREEN
NOTE 1 The split method ignores the value of separator.global for separators that are RegExp
>>>>>CM:GREEN
objects.

>>>>>CM:GREEN
NOTE 2 The split function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.15 String.prototype.substring (start, end)
>>>>>CM:GREEN
=================================================

>>>>>CM:GREEN
The substring method takes two arguments, start and end, and returns a substring of the result of
>>>>>CM:GREEN
converting this object to a String, starting from character position start and running to, but not
>>>>>CM:GREEN
including, character position end of the String (or through the end of the String is end is
>>>>>CM:GREEN
undefined). The result is a String value, not a String object.

>>>>>CM:GREEN
If either argument is NaN or negative, it is replaced with zero; if either argument is larger than
>>>>>CM:GREEN
the length of the String, it is replaced with the length of the String.

>>>>>CM:GREEN
If start is larger than end, they are swapped.

>>>>>CM:GREEN
The following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let len be the number of characters in S.
>>>>>CM:GREEN
4.  Let intStart be ToInteger(start).
>>>>>CM:GREEN
5.  If end is undefined, let intEnd be len; else let intEnd be ToInteger(end).
>>>>>CM:GREEN
6.  Let finalStart be min(max(intStart, 0), len).
>>>>>CM:GREEN
7.  Let finalEnd be min(max(intEnd, 0), len).
>>>>>CM:GREEN
8.  Let from be min(finalStart, finalEnd).
>>>>>CM:GREEN
9.  Let to be max(finalStart, finalEnd).
>>>>>CM:GREEN
10. Return a String whose length is to - from, containing characters from S, namely the characters
>>>>>CM:GREEN
    with indices from through to −1, in ascending order.

>>>>>CM:GREEN
The length property of the substring method is 2.

>>>>>CM:GREEN
NOTE The substring function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.16 String.prototype.toLowerCase ( )
>>>>>CM:GREEN
==========================================

>>>>>CM:GREEN
The following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let L be a String where each character of L is either the Unicode lowercase equivalent of the
>>>>>CM:GREEN
    corresponding character of S or the actual corresponding character of S if no Unicode lowercase
>>>>>CM:GREEN
    equivalent exists.
>>>>>CM:GREEN
4.  Return L.

>>>>>CM:GREEN
For the purposes of this operation, the 16-bit code units of the Strings are treated as code points
>>>>>CM:GREEN
in the Unicode Basic Multilingual Plane. Surrogate code points are directly transferred from S to L
>>>>>CM:GREEN
without any mapping.

>>>>>CM:GREEN
The result must be derived according to the case mappings in the Unicode character database (this
>>>>>CM:GREEN
explicitly includes not only the UnicodeData.txt file, but also the SpecialCasings.txt file that
>>>>>CM:GREEN
accompanies it in Unicode 2.1.8 and later).

>>>>>CM:GREEN
NOTE 1 The case mapping of some characters may produce multiple characters. In this case the result
>>>>>CM:GREEN
String may not be the same length as the source String. Because both toUpperCase and toLowerCase
>>>>>CM:GREEN
have context-sensitive behaviour, the functions are not symmetrical. In other words,
>>>>>CM:GREEN
s.toUpperCase().toLowerCase() is not necessarily equal to s.toLowerCase().

>>>>>CM:GREEN
NOTE 2 The toLowerCase function is intentionally generic; it does not require that its this value be
>>>>>CM:GREEN
a String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.17 String.prototype.toLocaleLowerCase ( )
>>>>>CM:GREEN
================================================

>>>>>CM:GREEN
This function works exactly the same as toLowerCase except that its result is intended to yield the
>>>>>CM:GREEN
correct result for the host environment’s current locale, rather than a locale-independent result.
>>>>>CM:GREEN
There will only be a difference in the few cases (such as Turkish) where the rules for that language
>>>>>CM:GREEN
conflict with the regular Unicode case mappings.

>>>>>CM:GREEN
NOTE 1 The first parameter to this function is likely to be used in a future version of this
>>>>>CM:GREEN
standard; it is recommended that implementations do not use this parameter position for anything
>>>>>CM:GREEN
else.

>>>>>CM:GREEN
NOTE 2 The toLocaleLowerCase function is intentionally generic; it does not require that its this
>>>>>CM:GREEN
value be a String object. Therefore, it can be transferred to other kinds of objects for use as a
>>>>>CM:GREEN
method.

>>>>>CM:GREEN
15.5.4.18 String.prototype.toUpperCase ( )
>>>>>CM:GREEN
==========================================

>>>>>CM:GREEN
This function behaves in exactly the same way as String.prototype.toLowerCase, except that
>>>>>CM:GREEN
characters are mapped to their uppercase equivalents as specified in the Unicode Character Database.

>>>>>CM:GREEN
NOTE The toUpperCase function is intentionally generic; it does not require that its this value be a
>>>>>CM:GREEN
String object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.4.19 String.prototype.toLocaleUpperCase ( )
>>>>>CM:GREEN
================================================

>>>>>CM:GREEN
This function works exactly the same as toUpperCase except that its result is intended to yield the
>>>>>CM:GREEN
correct result for the host environment’s current locale, rather than a locale-independent result.
>>>>>CM:GREEN
There will only be a difference in the few cases (such as Turkish) where the rules for that language
>>>>>CM:GREEN
conflict with the regular Unicode case mappings.

>>>>>CM:GREEN
NOTE 1 The first parameter to this function is likely to be used in a future version of this
>>>>>CM:GREEN
standard; it is recommended that implementations do not use this parameter position for anything
>>>>>CM:GREEN
else.

>>>>>CM:GREEN
NOTE 2 The toLocaleUpperCase function is intentionally generic; it does not require that its this
>>>>>CM:GREEN
value be a String object. Therefore, it can be transferred to other kinds of objects for use as a
>>>>>CM:GREEN
method.

>>>>>CM:GREEN
15.5.4.20 String.prototype.trim ( )
>>>>>CM:GREEN
===================================

>>>>>CM:GREEN
The following steps are taken:

>>>>>CM:GREEN
1.  Call CheckObjectCoercible passing the this value as its argument.
>>>>>CM:GREEN
2.  Let S be the result of calling ToString, giving it the this value as its argument.
>>>>>CM:GREEN
3.  Let T be a String value that is a copy of S with both leading and trailing white space removed.
>>>>>CM:GREEN
    The definition of white space is the union of WhiteSpace and LineTerminator.
>>>>>CM:GREEN
4.  Return T.

>>>>>CM:GREEN
NOTE The trim function is intentionally generic; it does not require that its this value be a String
>>>>>CM:GREEN
object. Therefore, it can be transferred to other kinds of objects for use as a method.

>>>>>CM:GREEN
15.5.5 Properties of String Instances
>>>>>CM:GREEN
=====================================

>>>>>CM:GREEN
String instances inherit properties from the String prototype object and their [[Class]] internal
>>>>>CM:GREEN
property value is "String". String instances also have a [[PrimitiveValue]] internal property, a
>>>>>CM:GREEN
length property, and a set of enumerable properties with array index names.

>>>>>CM:GREEN
The [[PrimitiveValue]] internal property is the String value represented by this String object. The
>>>>>CM:GREEN
array index named properties correspond to the individual characters of the String value. A special
>>>>>CM:GREEN
[[GetOwnProperty]] internal method is used to specify the number, values, and attributes of the
>>>>>CM:GREEN
array index named properties.

>>>>>CM:GREEN
15.5.5.1 length
>>>>>CM:GREEN
===============

>>>>>CM:GREEN
The number of characters in the String value represented by this String object.

>>>>>CM:GREEN
Once a String object is created, this property is unchanging. It has the attributes { [[Writable]]:
>>>>>CM:GREEN
false, [[Enumerable]]: false, [[Configurable]]: false }.

>>>>>CM:GREEN
15.5.5.2 [[GetOwnProperty]] ( P )
>>>>>CM:GREEN
=================================

>>>>>CM:GREEN
String objects use a variation of the [[GetOwnProperty]] internal method used for other native
>>>>>CM:GREEN
ECMAScript objects (8.12.1). This special internal method provides access to named properties
>>>>>CM:GREEN
corresponding to the individual characters of String objects.

>>>>>CM:GREEN
Assume S is a String object and P is a String.

>>>>>CM:GREEN
When the [[GetOwnProperty]] internal method of S is called with property name P, the following steps
>>>>>CM:GREEN
are taken:

>>>>>CM:GREEN
1.  Let desc be the result of calling the default [[GetOwnProperty]] internal method (8.12.1) on S
>>>>>CM:GREEN
    with argument P.
>>>>>CM:GREEN
2.  If desc is not undefined return desc.
>>>>>CM:GREEN
3.  If ToString(abs(ToInteger(P))) is not the same value as P, return undefined.
>>>>>CM:GREEN
4.  Let str be the String value of the [[PrimitiveValue]] internal property of S.
>>>>>CM:GREEN
5.  Let index be ToInteger(P).
>>>>>CM:GREEN
6.  Let len be the number of characters in str.
>>>>>CM:GREEN
7.  If len ≤ index, return undefined.
>>>>>CM:GREEN
8.  Let resultStr be a String of length 1, containing one character from str, specifically the
>>>>>CM:GREEN
    character at position index, where the first (leftmost) character in str is considered to be at
>>>>>CM:GREEN
    position 0, the next one at position 1, and so on.
>>>>>CM:GREEN
9.  Return a Property Descriptor { [[Value]]: resultStr, [[Enumerable]]: true, [[Writable]]: false,
>>>>>CM:GREEN
    [[Configurable]]: false }
