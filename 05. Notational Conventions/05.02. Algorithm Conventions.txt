5.2 Algorithm Conventions
=========================

The specification often uses a numbered list to specify steps in an algorithm. These algorithms are
used to precisely specify the required semantics of ECMAScript language constructs. The algorithms
are not intended to imply the use of any specific implementation technique. In practice, there may
be more efficient algorithms available to implement a given feature.

In order to facilitate their use in multiple parts of this specification, some algorithms, called
abstract operations, are named and written in parameterised functional form so that they may be
referenced by name from within other algorithms.

When an algorithm is to produce a value as a result, the directive “return x” is used to indicate
that the result of the algorithm is the value of x and that the algorithm should terminate. The
notation Result(n) is used as shorthand for “the result of step n”.

For clarity of expression, algorithm steps may be subdivided into sequential substeps. Substeps are
indented and may themselves be further divided into indented substeps. Outline numbering conventions
are used to identify substeps with the first level of substeps labelled with lower case alphabetic
characters and the second level of substeps labelled with lower case roman numerals. If more than
three levels are required these rules repeat with the fourth level using numeric labels. For
example:

1.  Top-level step
    1.  Substep.
    2.  Substep
        1.  Subsubstep.
        2.  Subsubstep.
            1.  Subsubsubstep
                1.  Subsubsubsubstep

A step or substep may be written as an “if” predicate that conditions its substeps. In this case,
the substeps are only applied if the predicate is true. If a step or substep begins with the word
“else”, it is a predicate that is the negation of the preceding “if” predicate step at the same
level.

A step may specify the iterative application of its substeps.

A step may assert an invariant condition of its algorithm. Such assertions are used to make explicit
algorithmic invariants that would otherwise be implicit. Such assertions add no additional semantic
requirements and hence need not be checked by an implementation. They are used simply to clarify
algorithms.

Mathematical operations such as addition, subtraction, negation, multiplication, division, and the
mathematical functions defined later in this clause should always be understood as computing exact
mathematical results on mathematical real numbers, which do not include infinities and do not
include a negative zero that is distinguished from positive zero. Algorithms in this standard that
model floating-point arithmetic include explicit steps, where necessary, to handle infinities and
signed zero and to perform rounding. If a mathematical operation or function is applied to a
floating-point number, it should be understood as being applied to the exact mathematical value
represented by that floating-point number; such a floating-point number must be finite, and if it is
+0 or −0 then the corresponding mathematical value is simply 0.

The mathematical function abs(x) yields the absolute value of x, which is −x if x is negative (less
than zero) and otherwise is x itself.

The mathematical function sign(x) yields 1 if x is positive and −1 if x is negative. The sign
function is not used in this standard for cases when x is zero.

The notation “x modulo y” (y must be finite and nonzero) computes a value k of the same sign as y
(or zero) such that abs(k) < abs(y) and x−k = q × y for some integer q.

The mathematical function floor(x) yields the largest integer (closest to positive infinity) that is
not larger than x.

NOTE floor(x) = x−(x modulo 1).

If an algorithm is defined to “throw an exception”, execution of the algorithm is terminated and no
result is returned. The calling algorithms are also terminated, until an algorithm step is reached
that explicitly deals with the exception, using terminology such as “If an exception was thrown…”.
Once such an algorithm step has been encountered the exception is no longer considered to have
occurred.
